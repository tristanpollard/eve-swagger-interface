/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCorporationsCorporationIdStructures200Ok', function() {
      beforeEach(function() {
        instance = new EveSwaggerInterface.GetCorporationsCorporationIdStructures200Ok();
      });

      it('should create an instance of GetCorporationsCorporationIdStructures200Ok', function() {
        // TODO: update the code to test GetCorporationsCorporationIdStructures200Ok
        expect(instance).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStructures200Ok);
      });

      it('should have the property corporationId (base name: "corporation_id")', function() {
        // TODO: update the code to test the property corporationId
        expect(instance).to.have.property('corporationId');
        // expect(instance.corporationId).to.be(expectedValueLiteral);
      });

      it('should have the property fuelExpires (base name: "fuel_expires")', function() {
        // TODO: update the code to test the property fuelExpires
        expect(instance).to.have.property('fuelExpires');
        // expect(instance.fuelExpires).to.be(expectedValueLiteral);
      });

      it('should have the property nextReinforceApply (base name: "next_reinforce_apply")', function() {
        // TODO: update the code to test the property nextReinforceApply
        expect(instance).to.have.property('nextReinforceApply');
        // expect(instance.nextReinforceApply).to.be(expectedValueLiteral);
      });

      it('should have the property nextReinforceHour (base name: "next_reinforce_hour")', function() {
        // TODO: update the code to test the property nextReinforceHour
        expect(instance).to.have.property('nextReinforceHour');
        // expect(instance.nextReinforceHour).to.be(expectedValueLiteral);
      });

      it('should have the property nextReinforceWeekday (base name: "next_reinforce_weekday")', function() {
        // TODO: update the code to test the property nextReinforceWeekday
        expect(instance).to.have.property('nextReinforceWeekday');
        // expect(instance.nextReinforceWeekday).to.be(expectedValueLiteral);
      });

      it('should have the property profileId (base name: "profile_id")', function() {
        // TODO: update the code to test the property profileId
        expect(instance).to.have.property('profileId');
        // expect(instance.profileId).to.be(expectedValueLiteral);
      });

      it('should have the property reinforceHour (base name: "reinforce_hour")', function() {
        // TODO: update the code to test the property reinforceHour
        expect(instance).to.have.property('reinforceHour');
        // expect(instance.reinforceHour).to.be(expectedValueLiteral);
      });

      it('should have the property reinforceWeekday (base name: "reinforce_weekday")', function() {
        // TODO: update the code to test the property reinforceWeekday
        expect(instance).to.have.property('reinforceWeekday');
        // expect(instance.reinforceWeekday).to.be(expectedValueLiteral);
      });

      it('should have the property services (base name: "services")', function() {
        // TODO: update the code to test the property services
        expect(instance).to.have.property('services');
        // expect(instance.services).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property stateTimerEnd (base name: "state_timer_end")', function() {
        // TODO: update the code to test the property stateTimerEnd
        expect(instance).to.have.property('stateTimerEnd');
        // expect(instance.stateTimerEnd).to.be(expectedValueLiteral);
      });

      it('should have the property stateTimerStart (base name: "state_timer_start")', function() {
        // TODO: update the code to test the property stateTimerStart
        expect(instance).to.have.property('stateTimerStart');
        // expect(instance.stateTimerStart).to.be(expectedValueLiteral);
      });

      it('should have the property structureId (base name: "structure_id")', function() {
        // TODO: update the code to test the property structureId
        expect(instance).to.have.property('structureId');
        // expect(instance.structureId).to.be(expectedValueLiteral);
      });

      it('should have the property systemId (base name: "system_id")', function() {
        // TODO: update the code to test the property systemId
        expect(instance).to.have.property('systemId');
        // expect(instance.systemId).to.be(expectedValueLiteral);
      });

      it('should have the property typeId (base name: "type_id")', function() {
        // TODO: update the code to test the property typeId
        expect(instance).to.have.property('typeId');
        // expect(instance.typeId).to.be(expectedValueLiteral);
      });

      it('should have the property unanchorsAt (base name: "unanchors_at")', function() {
        // TODO: update the code to test the property unanchorsAt
        expect(instance).to.have.property('unanchorsAt');
        // expect(instance.unanchorsAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
