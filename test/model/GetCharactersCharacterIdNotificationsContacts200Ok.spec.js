/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCharactersCharacterIdNotificationsContacts200Ok', function() {
      beforeEach(function() {
        instance = new EveSwaggerInterface.GetCharactersCharacterIdNotificationsContacts200Ok();
      });

      it('should create an instance of GetCharactersCharacterIdNotificationsContacts200Ok', function() {
        // TODO: update the code to test GetCharactersCharacterIdNotificationsContacts200Ok
        expect(instance).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdNotificationsContacts200Ok);
      });

      it('should have the property message (base name: "message")', function() {
        // TODO: update the code to test the property message
        expect(instance).to.have.property('message');
        // expect(instance.message).to.be(expectedValueLiteral);
      });

      it('should have the property notificationId (base name: "notification_id")', function() {
        // TODO: update the code to test the property notificationId
        expect(instance).to.have.property('notificationId');
        // expect(instance.notificationId).to.be(expectedValueLiteral);
      });

      it('should have the property sendDate (base name: "send_date")', function() {
        // TODO: update the code to test the property sendDate
        expect(instance).to.have.property('sendDate');
        // expect(instance.sendDate).to.be(expectedValueLiteral);
      });

      it('should have the property senderCharacterId (base name: "sender_character_id")', function() {
        // TODO: update the code to test the property senderCharacterId
        expect(instance).to.have.property('senderCharacterId');
        // expect(instance.senderCharacterId).to.be(expectedValueLiteral);
      });

      it('should have the property standingLevel (base name: "standing_level")', function() {
        // TODO: update the code to test the property standingLevel
        expect(instance).to.have.property('standingLevel');
        // expect(instance.standingLevel).to.be(expectedValueLiteral);
      });

    });
  });

}));
