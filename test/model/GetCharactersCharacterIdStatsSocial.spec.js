/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCharactersCharacterIdStatsSocial', function() {
      beforeEach(function() {
        instance = new EveSwaggerInterface.GetCharactersCharacterIdStatsSocial();
      });

      it('should create an instance of GetCharactersCharacterIdStatsSocial', function() {
        // TODO: update the code to test GetCharactersCharacterIdStatsSocial
        expect(instance).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsSocial);
      });

      it('should have the property addContactBad (base name: "add_contact_bad")', function() {
        // TODO: update the code to test the property addContactBad
        expect(instance).to.have.property('addContactBad');
        // expect(instance.addContactBad).to.be(expectedValueLiteral);
      });

      it('should have the property addContactGood (base name: "add_contact_good")', function() {
        // TODO: update the code to test the property addContactGood
        expect(instance).to.have.property('addContactGood');
        // expect(instance.addContactGood).to.be(expectedValueLiteral);
      });

      it('should have the property addContactHigh (base name: "add_contact_high")', function() {
        // TODO: update the code to test the property addContactHigh
        expect(instance).to.have.property('addContactHigh');
        // expect(instance.addContactHigh).to.be(expectedValueLiteral);
      });

      it('should have the property addContactHorrible (base name: "add_contact_horrible")', function() {
        // TODO: update the code to test the property addContactHorrible
        expect(instance).to.have.property('addContactHorrible');
        // expect(instance.addContactHorrible).to.be(expectedValueLiteral);
      });

      it('should have the property addContactNeutral (base name: "add_contact_neutral")', function() {
        // TODO: update the code to test the property addContactNeutral
        expect(instance).to.have.property('addContactNeutral');
        // expect(instance.addContactNeutral).to.be(expectedValueLiteral);
      });

      it('should have the property addNote (base name: "add_note")', function() {
        // TODO: update the code to test the property addNote
        expect(instance).to.have.property('addNote');
        // expect(instance.addNote).to.be(expectedValueLiteral);
      });

      it('should have the property addedAsContactBad (base name: "added_as_contact_bad")', function() {
        // TODO: update the code to test the property addedAsContactBad
        expect(instance).to.have.property('addedAsContactBad');
        // expect(instance.addedAsContactBad).to.be(expectedValueLiteral);
      });

      it('should have the property addedAsContactGood (base name: "added_as_contact_good")', function() {
        // TODO: update the code to test the property addedAsContactGood
        expect(instance).to.have.property('addedAsContactGood');
        // expect(instance.addedAsContactGood).to.be(expectedValueLiteral);
      });

      it('should have the property addedAsContactHigh (base name: "added_as_contact_high")', function() {
        // TODO: update the code to test the property addedAsContactHigh
        expect(instance).to.have.property('addedAsContactHigh');
        // expect(instance.addedAsContactHigh).to.be(expectedValueLiteral);
      });

      it('should have the property addedAsContactHorrible (base name: "added_as_contact_horrible")', function() {
        // TODO: update the code to test the property addedAsContactHorrible
        expect(instance).to.have.property('addedAsContactHorrible');
        // expect(instance.addedAsContactHorrible).to.be(expectedValueLiteral);
      });

      it('should have the property addedAsContactNeutral (base name: "added_as_contact_neutral")', function() {
        // TODO: update the code to test the property addedAsContactNeutral
        expect(instance).to.have.property('addedAsContactNeutral');
        // expect(instance.addedAsContactNeutral).to.be(expectedValueLiteral);
      });

      it('should have the property calendarEventCreated (base name: "calendar_event_created")', function() {
        // TODO: update the code to test the property calendarEventCreated
        expect(instance).to.have.property('calendarEventCreated');
        // expect(instance.calendarEventCreated).to.be(expectedValueLiteral);
      });

      it('should have the property chatMessagesAlliance (base name: "chat_messages_alliance")', function() {
        // TODO: update the code to test the property chatMessagesAlliance
        expect(instance).to.have.property('chatMessagesAlliance');
        // expect(instance.chatMessagesAlliance).to.be(expectedValueLiteral);
      });

      it('should have the property chatMessagesConstellation (base name: "chat_messages_constellation")', function() {
        // TODO: update the code to test the property chatMessagesConstellation
        expect(instance).to.have.property('chatMessagesConstellation');
        // expect(instance.chatMessagesConstellation).to.be(expectedValueLiteral);
      });

      it('should have the property chatMessagesCorporation (base name: "chat_messages_corporation")', function() {
        // TODO: update the code to test the property chatMessagesCorporation
        expect(instance).to.have.property('chatMessagesCorporation');
        // expect(instance.chatMessagesCorporation).to.be(expectedValueLiteral);
      });

      it('should have the property chatMessagesFleet (base name: "chat_messages_fleet")', function() {
        // TODO: update the code to test the property chatMessagesFleet
        expect(instance).to.have.property('chatMessagesFleet');
        // expect(instance.chatMessagesFleet).to.be(expectedValueLiteral);
      });

      it('should have the property chatMessagesRegion (base name: "chat_messages_region")', function() {
        // TODO: update the code to test the property chatMessagesRegion
        expect(instance).to.have.property('chatMessagesRegion');
        // expect(instance.chatMessagesRegion).to.be(expectedValueLiteral);
      });

      it('should have the property chatMessagesSolarsystem (base name: "chat_messages_solarsystem")', function() {
        // TODO: update the code to test the property chatMessagesSolarsystem
        expect(instance).to.have.property('chatMessagesSolarsystem');
        // expect(instance.chatMessagesSolarsystem).to.be(expectedValueLiteral);
      });

      it('should have the property chatMessagesWarfaction (base name: "chat_messages_warfaction")', function() {
        // TODO: update the code to test the property chatMessagesWarfaction
        expect(instance).to.have.property('chatMessagesWarfaction');
        // expect(instance.chatMessagesWarfaction).to.be(expectedValueLiteral);
      });

      it('should have the property chatTotalMessageLength (base name: "chat_total_message_length")', function() {
        // TODO: update the code to test the property chatTotalMessageLength
        expect(instance).to.have.property('chatTotalMessageLength');
        // expect(instance.chatTotalMessageLength).to.be(expectedValueLiteral);
      });

      it('should have the property directTrades (base name: "direct_trades")', function() {
        // TODO: update the code to test the property directTrades
        expect(instance).to.have.property('directTrades');
        // expect(instance.directTrades).to.be(expectedValueLiteral);
      });

      it('should have the property fleetBroadcasts (base name: "fleet_broadcasts")', function() {
        // TODO: update the code to test the property fleetBroadcasts
        expect(instance).to.have.property('fleetBroadcasts');
        // expect(instance.fleetBroadcasts).to.be(expectedValueLiteral);
      });

      it('should have the property fleetJoins (base name: "fleet_joins")', function() {
        // TODO: update the code to test the property fleetJoins
        expect(instance).to.have.property('fleetJoins');
        // expect(instance.fleetJoins).to.be(expectedValueLiteral);
      });

      it('should have the property mailsReceived (base name: "mails_received")', function() {
        // TODO: update the code to test the property mailsReceived
        expect(instance).to.have.property('mailsReceived');
        // expect(instance.mailsReceived).to.be(expectedValueLiteral);
      });

      it('should have the property mailsSent (base name: "mails_sent")', function() {
        // TODO: update the code to test the property mailsSent
        expect(instance).to.have.property('mailsSent');
        // expect(instance.mailsSent).to.be(expectedValueLiteral);
      });

    });
  });

}));
