/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCharactersCharacterIdClonesJumpClone', function() {
      beforeEach(function() {
        instance = new EveSwaggerInterface.GetCharactersCharacterIdClonesJumpClone();
      });

      it('should create an instance of GetCharactersCharacterIdClonesJumpClone', function() {
        // TODO: update the code to test GetCharactersCharacterIdClonesJumpClone
        expect(instance).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdClonesJumpClone);
      });

      it('should have the property implants (base name: "implants")', function() {
        // TODO: update the code to test the property implants
        expect(instance).to.have.property('implants');
        // expect(instance.implants).to.be(expectedValueLiteral);
      });

      it('should have the property jumpCloneId (base name: "jump_clone_id")', function() {
        // TODO: update the code to test the property jumpCloneId
        expect(instance).to.have.property('jumpCloneId');
        // expect(instance.jumpCloneId).to.be(expectedValueLiteral);
      });

      it('should have the property locationId (base name: "location_id")', function() {
        // TODO: update the code to test the property locationId
        expect(instance).to.have.property('locationId');
        // expect(instance.locationId).to.be(expectedValueLiteral);
      });

      it('should have the property locationType (base name: "location_type")', function() {
        // TODO: update the code to test the property locationType
        expect(instance).to.have.property('locationType');
        // expect(instance.locationType).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

    });
  });

}));
