/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCorporationsCorporationIdStarbasesStarbaseIdOk', function() {
      beforeEach(function() {
        instance = new EveSwaggerInterface.GetCorporationsCorporationIdStarbasesStarbaseIdOk();
      });

      it('should create an instance of GetCorporationsCorporationIdStarbasesStarbaseIdOk', function() {
        // TODO: update the code to test GetCorporationsCorporationIdStarbasesStarbaseIdOk
        expect(instance).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStarbasesStarbaseIdOk);
      });

      it('should have the property allowAllianceMembers (base name: "allow_alliance_members")', function() {
        // TODO: update the code to test the property allowAllianceMembers
        expect(instance).to.have.property('allowAllianceMembers');
        // expect(instance.allowAllianceMembers).to.be(expectedValueLiteral);
      });

      it('should have the property allowCorporationMembers (base name: "allow_corporation_members")', function() {
        // TODO: update the code to test the property allowCorporationMembers
        expect(instance).to.have.property('allowCorporationMembers');
        // expect(instance.allowCorporationMembers).to.be(expectedValueLiteral);
      });

      it('should have the property anchor (base name: "anchor")', function() {
        // TODO: update the code to test the property anchor
        expect(instance).to.have.property('anchor');
        // expect(instance.anchor).to.be(expectedValueLiteral);
      });

      it('should have the property attackIfAtWar (base name: "attack_if_at_war")', function() {
        // TODO: update the code to test the property attackIfAtWar
        expect(instance).to.have.property('attackIfAtWar');
        // expect(instance.attackIfAtWar).to.be(expectedValueLiteral);
      });

      it('should have the property attackIfOtherSecurityStatusDropping (base name: "attack_if_other_security_status_dropping")', function() {
        // TODO: update the code to test the property attackIfOtherSecurityStatusDropping
        expect(instance).to.have.property('attackIfOtherSecurityStatusDropping');
        // expect(instance.attackIfOtherSecurityStatusDropping).to.be(expectedValueLiteral);
      });

      it('should have the property attackSecurityStatusThreshold (base name: "attack_security_status_threshold")', function() {
        // TODO: update the code to test the property attackSecurityStatusThreshold
        expect(instance).to.have.property('attackSecurityStatusThreshold');
        // expect(instance.attackSecurityStatusThreshold).to.be(expectedValueLiteral);
      });

      it('should have the property attackStandingThreshold (base name: "attack_standing_threshold")', function() {
        // TODO: update the code to test the property attackStandingThreshold
        expect(instance).to.have.property('attackStandingThreshold');
        // expect(instance.attackStandingThreshold).to.be(expectedValueLiteral);
      });

      it('should have the property fuelBayTake (base name: "fuel_bay_take")', function() {
        // TODO: update the code to test the property fuelBayTake
        expect(instance).to.have.property('fuelBayTake');
        // expect(instance.fuelBayTake).to.be(expectedValueLiteral);
      });

      it('should have the property fuelBayView (base name: "fuel_bay_view")', function() {
        // TODO: update the code to test the property fuelBayView
        expect(instance).to.have.property('fuelBayView');
        // expect(instance.fuelBayView).to.be(expectedValueLiteral);
      });

      it('should have the property fuels (base name: "fuels")', function() {
        // TODO: update the code to test the property fuels
        expect(instance).to.have.property('fuels');
        // expect(instance.fuels).to.be(expectedValueLiteral);
      });

      it('should have the property offline (base name: "offline")', function() {
        // TODO: update the code to test the property offline
        expect(instance).to.have.property('offline');
        // expect(instance.offline).to.be(expectedValueLiteral);
      });

      it('should have the property online (base name: "online")', function() {
        // TODO: update the code to test the property online
        expect(instance).to.have.property('online');
        // expect(instance.online).to.be(expectedValueLiteral);
      });

      it('should have the property unanchor (base name: "unanchor")', function() {
        // TODO: update the code to test the property unanchor
        expect(instance).to.have.property('unanchor');
        // expect(instance.unanchor).to.be(expectedValueLiteral);
      });

      it('should have the property useAllianceStandings (base name: "use_alliance_standings")', function() {
        // TODO: update the code to test the property useAllianceStandings
        expect(instance).to.have.property('useAllianceStandings');
        // expect(instance.useAllianceStandings).to.be(expectedValueLiteral);
      });

    });
  });

}));
