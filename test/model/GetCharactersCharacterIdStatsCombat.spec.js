/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetCharactersCharacterIdStatsCombat', function() {
      beforeEach(function() {
        instance = new EveSwaggerInterface.GetCharactersCharacterIdStatsCombat();
      });

      it('should create an instance of GetCharactersCharacterIdStatsCombat', function() {
        // TODO: update the code to test GetCharactersCharacterIdStatsCombat
        expect(instance).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsCombat);
      });

      it('should have the property capDrainedbyNpc (base name: "cap_drainedby_npc")', function() {
        // TODO: update the code to test the property capDrainedbyNpc
        expect(instance).to.have.property('capDrainedbyNpc');
        // expect(instance.capDrainedbyNpc).to.be(expectedValueLiteral);
      });

      it('should have the property capDrainedbyPc (base name: "cap_drainedby_pc")', function() {
        // TODO: update the code to test the property capDrainedbyPc
        expect(instance).to.have.property('capDrainedbyPc');
        // expect(instance.capDrainedbyPc).to.be(expectedValueLiteral);
      });

      it('should have the property capDrainingPc (base name: "cap_draining_pc")', function() {
        // TODO: update the code to test the property capDrainingPc
        expect(instance).to.have.property('capDrainingPc');
        // expect(instance.capDrainingPc).to.be(expectedValueLiteral);
      });

      it('should have the property criminalFlagSet (base name: "criminal_flag_set")', function() {
        // TODO: update the code to test the property criminalFlagSet
        expect(instance).to.have.property('criminalFlagSet');
        // expect(instance.criminalFlagSet).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromNpCsAmount (base name: "damage_from_np_cs_amount")', function() {
        // TODO: update the code to test the property damageFromNpCsAmount
        expect(instance).to.have.property('damageFromNpCsAmount');
        // expect(instance.damageFromNpCsAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromNpCsNumShots (base name: "damage_from_np_cs_num_shots")', function() {
        // TODO: update the code to test the property damageFromNpCsNumShots
        expect(instance).to.have.property('damageFromNpCsNumShots');
        // expect(instance.damageFromNpCsNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersBombAmount (base name: "damage_from_players_bomb_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersBombAmount
        expect(instance).to.have.property('damageFromPlayersBombAmount');
        // expect(instance.damageFromPlayersBombAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersBombNumShots (base name: "damage_from_players_bomb_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersBombNumShots
        expect(instance).to.have.property('damageFromPlayersBombNumShots');
        // expect(instance.damageFromPlayersBombNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersCombatDroneAmount (base name: "damage_from_players_combat_drone_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersCombatDroneAmount
        expect(instance).to.have.property('damageFromPlayersCombatDroneAmount');
        // expect(instance.damageFromPlayersCombatDroneAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersCombatDroneNumShots (base name: "damage_from_players_combat_drone_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersCombatDroneNumShots
        expect(instance).to.have.property('damageFromPlayersCombatDroneNumShots');
        // expect(instance.damageFromPlayersCombatDroneNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersEnergyAmount (base name: "damage_from_players_energy_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersEnergyAmount
        expect(instance).to.have.property('damageFromPlayersEnergyAmount');
        // expect(instance.damageFromPlayersEnergyAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersEnergyNumShots (base name: "damage_from_players_energy_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersEnergyNumShots
        expect(instance).to.have.property('damageFromPlayersEnergyNumShots');
        // expect(instance.damageFromPlayersEnergyNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersFighterBomberAmount (base name: "damage_from_players_fighter_bomber_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersFighterBomberAmount
        expect(instance).to.have.property('damageFromPlayersFighterBomberAmount');
        // expect(instance.damageFromPlayersFighterBomberAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersFighterBomberNumShots (base name: "damage_from_players_fighter_bomber_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersFighterBomberNumShots
        expect(instance).to.have.property('damageFromPlayersFighterBomberNumShots');
        // expect(instance.damageFromPlayersFighterBomberNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersFighterDroneAmount (base name: "damage_from_players_fighter_drone_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersFighterDroneAmount
        expect(instance).to.have.property('damageFromPlayersFighterDroneAmount');
        // expect(instance.damageFromPlayersFighterDroneAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersFighterDroneNumShots (base name: "damage_from_players_fighter_drone_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersFighterDroneNumShots
        expect(instance).to.have.property('damageFromPlayersFighterDroneNumShots');
        // expect(instance.damageFromPlayersFighterDroneNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersHybridAmount (base name: "damage_from_players_hybrid_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersHybridAmount
        expect(instance).to.have.property('damageFromPlayersHybridAmount');
        // expect(instance.damageFromPlayersHybridAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersHybridNumShots (base name: "damage_from_players_hybrid_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersHybridNumShots
        expect(instance).to.have.property('damageFromPlayersHybridNumShots');
        // expect(instance.damageFromPlayersHybridNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersMissileAmount (base name: "damage_from_players_missile_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersMissileAmount
        expect(instance).to.have.property('damageFromPlayersMissileAmount');
        // expect(instance.damageFromPlayersMissileAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersMissileNumShots (base name: "damage_from_players_missile_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersMissileNumShots
        expect(instance).to.have.property('damageFromPlayersMissileNumShots');
        // expect(instance.damageFromPlayersMissileNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersProjectileAmount (base name: "damage_from_players_projectile_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersProjectileAmount
        expect(instance).to.have.property('damageFromPlayersProjectileAmount');
        // expect(instance.damageFromPlayersProjectileAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersProjectileNumShots (base name: "damage_from_players_projectile_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersProjectileNumShots
        expect(instance).to.have.property('damageFromPlayersProjectileNumShots');
        // expect(instance.damageFromPlayersProjectileNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersSmartBombAmount (base name: "damage_from_players_smart_bomb_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersSmartBombAmount
        expect(instance).to.have.property('damageFromPlayersSmartBombAmount');
        // expect(instance.damageFromPlayersSmartBombAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersSmartBombNumShots (base name: "damage_from_players_smart_bomb_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersSmartBombNumShots
        expect(instance).to.have.property('damageFromPlayersSmartBombNumShots');
        // expect(instance.damageFromPlayersSmartBombNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersSuperAmount (base name: "damage_from_players_super_amount")', function() {
        // TODO: update the code to test the property damageFromPlayersSuperAmount
        expect(instance).to.have.property('damageFromPlayersSuperAmount');
        // expect(instance.damageFromPlayersSuperAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromPlayersSuperNumShots (base name: "damage_from_players_super_num_shots")', function() {
        // TODO: update the code to test the property damageFromPlayersSuperNumShots
        expect(instance).to.have.property('damageFromPlayersSuperNumShots');
        // expect(instance.damageFromPlayersSuperNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromStructuresTotalAmount (base name: "damage_from_structures_total_amount")', function() {
        // TODO: update the code to test the property damageFromStructuresTotalAmount
        expect(instance).to.have.property('damageFromStructuresTotalAmount');
        // expect(instance.damageFromStructuresTotalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageFromStructuresTotalNumShots (base name: "damage_from_structures_total_num_shots")', function() {
        // TODO: update the code to test the property damageFromStructuresTotalNumShots
        expect(instance).to.have.property('damageFromStructuresTotalNumShots');
        // expect(instance.damageFromStructuresTotalNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersBombAmount (base name: "damage_to_players_bomb_amount")', function() {
        // TODO: update the code to test the property damageToPlayersBombAmount
        expect(instance).to.have.property('damageToPlayersBombAmount');
        // expect(instance.damageToPlayersBombAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersBombNumShots (base name: "damage_to_players_bomb_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersBombNumShots
        expect(instance).to.have.property('damageToPlayersBombNumShots');
        // expect(instance.damageToPlayersBombNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersCombatDroneAmount (base name: "damage_to_players_combat_drone_amount")', function() {
        // TODO: update the code to test the property damageToPlayersCombatDroneAmount
        expect(instance).to.have.property('damageToPlayersCombatDroneAmount');
        // expect(instance.damageToPlayersCombatDroneAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersCombatDroneNumShots (base name: "damage_to_players_combat_drone_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersCombatDroneNumShots
        expect(instance).to.have.property('damageToPlayersCombatDroneNumShots');
        // expect(instance.damageToPlayersCombatDroneNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersEnergyAmount (base name: "damage_to_players_energy_amount")', function() {
        // TODO: update the code to test the property damageToPlayersEnergyAmount
        expect(instance).to.have.property('damageToPlayersEnergyAmount');
        // expect(instance.damageToPlayersEnergyAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersEnergyNumShots (base name: "damage_to_players_energy_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersEnergyNumShots
        expect(instance).to.have.property('damageToPlayersEnergyNumShots');
        // expect(instance.damageToPlayersEnergyNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersFighterBomberAmount (base name: "damage_to_players_fighter_bomber_amount")', function() {
        // TODO: update the code to test the property damageToPlayersFighterBomberAmount
        expect(instance).to.have.property('damageToPlayersFighterBomberAmount');
        // expect(instance.damageToPlayersFighterBomberAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersFighterBomberNumShots (base name: "damage_to_players_fighter_bomber_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersFighterBomberNumShots
        expect(instance).to.have.property('damageToPlayersFighterBomberNumShots');
        // expect(instance.damageToPlayersFighterBomberNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersFighterDroneAmount (base name: "damage_to_players_fighter_drone_amount")', function() {
        // TODO: update the code to test the property damageToPlayersFighterDroneAmount
        expect(instance).to.have.property('damageToPlayersFighterDroneAmount');
        // expect(instance.damageToPlayersFighterDroneAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersFighterDroneNumShots (base name: "damage_to_players_fighter_drone_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersFighterDroneNumShots
        expect(instance).to.have.property('damageToPlayersFighterDroneNumShots');
        // expect(instance.damageToPlayersFighterDroneNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersHybridAmount (base name: "damage_to_players_hybrid_amount")', function() {
        // TODO: update the code to test the property damageToPlayersHybridAmount
        expect(instance).to.have.property('damageToPlayersHybridAmount');
        // expect(instance.damageToPlayersHybridAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersHybridNumShots (base name: "damage_to_players_hybrid_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersHybridNumShots
        expect(instance).to.have.property('damageToPlayersHybridNumShots');
        // expect(instance.damageToPlayersHybridNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersMissileAmount (base name: "damage_to_players_missile_amount")', function() {
        // TODO: update the code to test the property damageToPlayersMissileAmount
        expect(instance).to.have.property('damageToPlayersMissileAmount');
        // expect(instance.damageToPlayersMissileAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersMissileNumShots (base name: "damage_to_players_missile_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersMissileNumShots
        expect(instance).to.have.property('damageToPlayersMissileNumShots');
        // expect(instance.damageToPlayersMissileNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersProjectileAmount (base name: "damage_to_players_projectile_amount")', function() {
        // TODO: update the code to test the property damageToPlayersProjectileAmount
        expect(instance).to.have.property('damageToPlayersProjectileAmount');
        // expect(instance.damageToPlayersProjectileAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersProjectileNumShots (base name: "damage_to_players_projectile_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersProjectileNumShots
        expect(instance).to.have.property('damageToPlayersProjectileNumShots');
        // expect(instance.damageToPlayersProjectileNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersSmartBombAmount (base name: "damage_to_players_smart_bomb_amount")', function() {
        // TODO: update the code to test the property damageToPlayersSmartBombAmount
        expect(instance).to.have.property('damageToPlayersSmartBombAmount');
        // expect(instance.damageToPlayersSmartBombAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersSmartBombNumShots (base name: "damage_to_players_smart_bomb_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersSmartBombNumShots
        expect(instance).to.have.property('damageToPlayersSmartBombNumShots');
        // expect(instance.damageToPlayersSmartBombNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersSuperAmount (base name: "damage_to_players_super_amount")', function() {
        // TODO: update the code to test the property damageToPlayersSuperAmount
        expect(instance).to.have.property('damageToPlayersSuperAmount');
        // expect(instance.damageToPlayersSuperAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToPlayersSuperNumShots (base name: "damage_to_players_super_num_shots")', function() {
        // TODO: update the code to test the property damageToPlayersSuperNumShots
        expect(instance).to.have.property('damageToPlayersSuperNumShots');
        // expect(instance.damageToPlayersSuperNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property damageToStructuresTotalAmount (base name: "damage_to_structures_total_amount")', function() {
        // TODO: update the code to test the property damageToStructuresTotalAmount
        expect(instance).to.have.property('damageToStructuresTotalAmount');
        // expect(instance.damageToStructuresTotalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property damageToStructuresTotalNumShots (base name: "damage_to_structures_total_num_shots")', function() {
        // TODO: update the code to test the property damageToStructuresTotalNumShots
        expect(instance).to.have.property('damageToStructuresTotalNumShots');
        // expect(instance.damageToStructuresTotalNumShots).to.be(expectedValueLiteral);
      });

      it('should have the property deathsHighSec (base name: "deaths_high_sec")', function() {
        // TODO: update the code to test the property deathsHighSec
        expect(instance).to.have.property('deathsHighSec');
        // expect(instance.deathsHighSec).to.be(expectedValueLiteral);
      });

      it('should have the property deathsLowSec (base name: "deaths_low_sec")', function() {
        // TODO: update the code to test the property deathsLowSec
        expect(instance).to.have.property('deathsLowSec');
        // expect(instance.deathsLowSec).to.be(expectedValueLiteral);
      });

      it('should have the property deathsNullSec (base name: "deaths_null_sec")', function() {
        // TODO: update the code to test the property deathsNullSec
        expect(instance).to.have.property('deathsNullSec');
        // expect(instance.deathsNullSec).to.be(expectedValueLiteral);
      });

      it('should have the property deathsPodHighSec (base name: "deaths_pod_high_sec")', function() {
        // TODO: update the code to test the property deathsPodHighSec
        expect(instance).to.have.property('deathsPodHighSec');
        // expect(instance.deathsPodHighSec).to.be(expectedValueLiteral);
      });

      it('should have the property deathsPodLowSec (base name: "deaths_pod_low_sec")', function() {
        // TODO: update the code to test the property deathsPodLowSec
        expect(instance).to.have.property('deathsPodLowSec');
        // expect(instance.deathsPodLowSec).to.be(expectedValueLiteral);
      });

      it('should have the property deathsPodNullSec (base name: "deaths_pod_null_sec")', function() {
        // TODO: update the code to test the property deathsPodNullSec
        expect(instance).to.have.property('deathsPodNullSec');
        // expect(instance.deathsPodNullSec).to.be(expectedValueLiteral);
      });

      it('should have the property deathsPodWormhole (base name: "deaths_pod_wormhole")', function() {
        // TODO: update the code to test the property deathsPodWormhole
        expect(instance).to.have.property('deathsPodWormhole');
        // expect(instance.deathsPodWormhole).to.be(expectedValueLiteral);
      });

      it('should have the property deathsWormhole (base name: "deaths_wormhole")', function() {
        // TODO: update the code to test the property deathsWormhole
        expect(instance).to.have.property('deathsWormhole');
        // expect(instance.deathsWormhole).to.be(expectedValueLiteral);
      });

      it('should have the property droneEngage (base name: "drone_engage")', function() {
        // TODO: update the code to test the property droneEngage
        expect(instance).to.have.property('droneEngage');
        // expect(instance.droneEngage).to.be(expectedValueLiteral);
      });

      it('should have the property dscans (base name: "dscans")', function() {
        // TODO: update the code to test the property dscans
        expect(instance).to.have.property('dscans');
        // expect(instance.dscans).to.be(expectedValueLiteral);
      });

      it('should have the property duelRequested (base name: "duel_requested")', function() {
        // TODO: update the code to test the property duelRequested
        expect(instance).to.have.property('duelRequested');
        // expect(instance.duelRequested).to.be(expectedValueLiteral);
      });

      it('should have the property engagementRegister (base name: "engagement_register")', function() {
        // TODO: update the code to test the property engagementRegister
        expect(instance).to.have.property('engagementRegister');
        // expect(instance.engagementRegister).to.be(expectedValueLiteral);
      });

      it('should have the property killsAssists (base name: "kills_assists")', function() {
        // TODO: update the code to test the property killsAssists
        expect(instance).to.have.property('killsAssists');
        // expect(instance.killsAssists).to.be(expectedValueLiteral);
      });

      it('should have the property killsHighSec (base name: "kills_high_sec")', function() {
        // TODO: update the code to test the property killsHighSec
        expect(instance).to.have.property('killsHighSec');
        // expect(instance.killsHighSec).to.be(expectedValueLiteral);
      });

      it('should have the property killsLowSec (base name: "kills_low_sec")', function() {
        // TODO: update the code to test the property killsLowSec
        expect(instance).to.have.property('killsLowSec');
        // expect(instance.killsLowSec).to.be(expectedValueLiteral);
      });

      it('should have the property killsNullSec (base name: "kills_null_sec")', function() {
        // TODO: update the code to test the property killsNullSec
        expect(instance).to.have.property('killsNullSec');
        // expect(instance.killsNullSec).to.be(expectedValueLiteral);
      });

      it('should have the property killsPodHighSec (base name: "kills_pod_high_sec")', function() {
        // TODO: update the code to test the property killsPodHighSec
        expect(instance).to.have.property('killsPodHighSec');
        // expect(instance.killsPodHighSec).to.be(expectedValueLiteral);
      });

      it('should have the property killsPodLowSec (base name: "kills_pod_low_sec")', function() {
        // TODO: update the code to test the property killsPodLowSec
        expect(instance).to.have.property('killsPodLowSec');
        // expect(instance.killsPodLowSec).to.be(expectedValueLiteral);
      });

      it('should have the property killsPodNullSec (base name: "kills_pod_null_sec")', function() {
        // TODO: update the code to test the property killsPodNullSec
        expect(instance).to.have.property('killsPodNullSec');
        // expect(instance.killsPodNullSec).to.be(expectedValueLiteral);
      });

      it('should have the property killsPodWormhole (base name: "kills_pod_wormhole")', function() {
        // TODO: update the code to test the property killsPodWormhole
        expect(instance).to.have.property('killsPodWormhole');
        // expect(instance.killsPodWormhole).to.be(expectedValueLiteral);
      });

      it('should have the property killsWormhole (base name: "kills_wormhole")', function() {
        // TODO: update the code to test the property killsWormhole
        expect(instance).to.have.property('killsWormhole');
        // expect(instance.killsWormhole).to.be(expectedValueLiteral);
      });

      it('should have the property npcFlagSet (base name: "npc_flag_set")', function() {
        // TODO: update the code to test the property npcFlagSet
        expect(instance).to.have.property('npcFlagSet');
        // expect(instance.npcFlagSet).to.be(expectedValueLiteral);
      });

      it('should have the property probeScans (base name: "probe_scans")', function() {
        // TODO: update the code to test the property probeScans
        expect(instance).to.have.property('probeScans');
        // expect(instance.probeScans).to.be(expectedValueLiteral);
      });

      it('should have the property pvpFlagSet (base name: "pvp_flag_set")', function() {
        // TODO: update the code to test the property pvpFlagSet
        expect(instance).to.have.property('pvpFlagSet');
        // expect(instance.pvpFlagSet).to.be(expectedValueLiteral);
      });

      it('should have the property repairArmorByRemoteAmount (base name: "repair_armor_by_remote_amount")', function() {
        // TODO: update the code to test the property repairArmorByRemoteAmount
        expect(instance).to.have.property('repairArmorByRemoteAmount');
        // expect(instance.repairArmorByRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairArmorRemoteAmount (base name: "repair_armor_remote_amount")', function() {
        // TODO: update the code to test the property repairArmorRemoteAmount
        expect(instance).to.have.property('repairArmorRemoteAmount');
        // expect(instance.repairArmorRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairArmorSelfAmount (base name: "repair_armor_self_amount")', function() {
        // TODO: update the code to test the property repairArmorSelfAmount
        expect(instance).to.have.property('repairArmorSelfAmount');
        // expect(instance.repairArmorSelfAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairCapacitorByRemoteAmount (base name: "repair_capacitor_by_remote_amount")', function() {
        // TODO: update the code to test the property repairCapacitorByRemoteAmount
        expect(instance).to.have.property('repairCapacitorByRemoteAmount');
        // expect(instance.repairCapacitorByRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairCapacitorRemoteAmount (base name: "repair_capacitor_remote_amount")', function() {
        // TODO: update the code to test the property repairCapacitorRemoteAmount
        expect(instance).to.have.property('repairCapacitorRemoteAmount');
        // expect(instance.repairCapacitorRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairCapacitorSelfAmount (base name: "repair_capacitor_self_amount")', function() {
        // TODO: update the code to test the property repairCapacitorSelfAmount
        expect(instance).to.have.property('repairCapacitorSelfAmount');
        // expect(instance.repairCapacitorSelfAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairHullByRemoteAmount (base name: "repair_hull_by_remote_amount")', function() {
        // TODO: update the code to test the property repairHullByRemoteAmount
        expect(instance).to.have.property('repairHullByRemoteAmount');
        // expect(instance.repairHullByRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairHullRemoteAmount (base name: "repair_hull_remote_amount")', function() {
        // TODO: update the code to test the property repairHullRemoteAmount
        expect(instance).to.have.property('repairHullRemoteAmount');
        // expect(instance.repairHullRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairHullSelfAmount (base name: "repair_hull_self_amount")', function() {
        // TODO: update the code to test the property repairHullSelfAmount
        expect(instance).to.have.property('repairHullSelfAmount');
        // expect(instance.repairHullSelfAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairShieldByRemoteAmount (base name: "repair_shield_by_remote_amount")', function() {
        // TODO: update the code to test the property repairShieldByRemoteAmount
        expect(instance).to.have.property('repairShieldByRemoteAmount');
        // expect(instance.repairShieldByRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairShieldRemoteAmount (base name: "repair_shield_remote_amount")', function() {
        // TODO: update the code to test the property repairShieldRemoteAmount
        expect(instance).to.have.property('repairShieldRemoteAmount');
        // expect(instance.repairShieldRemoteAmount).to.be(expectedValueLiteral);
      });

      it('should have the property repairShieldSelfAmount (base name: "repair_shield_self_amount")', function() {
        // TODO: update the code to test the property repairShieldSelfAmount
        expect(instance).to.have.property('repairShieldSelfAmount');
        // expect(instance.repairShieldSelfAmount).to.be(expectedValueLiteral);
      });

      it('should have the property selfDestructs (base name: "self_destructs")', function() {
        // TODO: update the code to test the property selfDestructs
        expect(instance).to.have.property('selfDestructs');
        // expect(instance.selfDestructs).to.be(expectedValueLiteral);
      });

      it('should have the property warpScramblePc (base name: "warp_scramble_pc")', function() {
        // TODO: update the code to test the property warpScramblePc
        expect(instance).to.have.property('warpScramblePc');
        // expect(instance.warpScramblePc).to.be(expectedValueLiteral);
      });

      it('should have the property warpScrambledbyNpc (base name: "warp_scrambledby_npc")', function() {
        // TODO: update the code to test the property warpScrambledbyNpc
        expect(instance).to.have.property('warpScrambledbyNpc');
        // expect(instance.warpScrambledbyNpc).to.be(expectedValueLiteral);
      });

      it('should have the property warpScrambledbyPc (base name: "warp_scrambledby_pc")', function() {
        // TODO: update the code to test the property warpScrambledbyPc
        expect(instance).to.have.property('warpScrambledbyPc');
        // expect(instance.warpScrambledbyPc).to.be(expectedValueLiteral);
      });

      it('should have the property weaponFlagSet (base name: "weapon_flag_set")', function() {
        // TODO: update the code to test the property weaponFlagSet
        expect(instance).to.have.property('weaponFlagSet');
        // expect(instance.weaponFlagSet).to.be(expectedValueLiteral);
      });

      it('should have the property webifiedbyNpc (base name: "webifiedby_npc")', function() {
        // TODO: update the code to test the property webifiedbyNpc
        expect(instance).to.have.property('webifiedbyNpc');
        // expect(instance.webifiedbyNpc).to.be(expectedValueLiteral);
      });

      it('should have the property webifiedbyPc (base name: "webifiedby_pc")', function() {
        // TODO: update the code to test the property webifiedbyPc
        expect(instance).to.have.property('webifiedbyPc');
        // expect(instance.webifiedbyPc).to.be(expectedValueLiteral);
      });

      it('should have the property webifyingPc (base name: "webifying_pc")', function() {
        // TODO: update the code to test the property webifyingPc
        expect(instance).to.have.property('webifyingPc');
        // expect(instance.webifyingPc).to.be(expectedValueLiteral);
      });

    });
  });

}));
