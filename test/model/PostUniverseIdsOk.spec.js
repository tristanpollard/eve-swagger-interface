/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PostUniverseIdsOk', function() {
      beforeEach(function() {
        instance = new EveSwaggerInterface.PostUniverseIdsOk();
      });

      it('should create an instance of PostUniverseIdsOk', function() {
        // TODO: update the code to test PostUniverseIdsOk
        expect(instance).to.be.a(EveSwaggerInterface.PostUniverseIdsOk);
      });

      it('should have the property agents (base name: "agents")', function() {
        // TODO: update the code to test the property agents
        expect(instance).to.have.property('agents');
        // expect(instance.agents).to.be(expectedValueLiteral);
      });

      it('should have the property alliances (base name: "alliances")', function() {
        // TODO: update the code to test the property alliances
        expect(instance).to.have.property('alliances');
        // expect(instance.alliances).to.be(expectedValueLiteral);
      });

      it('should have the property characters (base name: "characters")', function() {
        // TODO: update the code to test the property characters
        expect(instance).to.have.property('characters');
        // expect(instance.characters).to.be(expectedValueLiteral);
      });

      it('should have the property constellations (base name: "constellations")', function() {
        // TODO: update the code to test the property constellations
        expect(instance).to.have.property('constellations');
        // expect(instance.constellations).to.be(expectedValueLiteral);
      });

      it('should have the property corporations (base name: "corporations")', function() {
        // TODO: update the code to test the property corporations
        expect(instance).to.have.property('corporations');
        // expect(instance.corporations).to.be(expectedValueLiteral);
      });

      it('should have the property factions (base name: "factions")', function() {
        // TODO: update the code to test the property factions
        expect(instance).to.have.property('factions');
        // expect(instance.factions).to.be(expectedValueLiteral);
      });

      it('should have the property inventoryTypes (base name: "inventory_types")', function() {
        // TODO: update the code to test the property inventoryTypes
        expect(instance).to.have.property('inventoryTypes');
        // expect(instance.inventoryTypes).to.be(expectedValueLiteral);
      });

      it('should have the property regions (base name: "regions")', function() {
        // TODO: update the code to test the property regions
        expect(instance).to.have.property('regions');
        // expect(instance.regions).to.be(expectedValueLiteral);
      });

      it('should have the property stations (base name: "stations")', function() {
        // TODO: update the code to test the property stations
        expect(instance).to.have.property('stations');
        // expect(instance.stations).to.be(expectedValueLiteral);
      });

      it('should have the property systems (base name: "systems")', function() {
        // TODO: update the code to test the property systems
        expect(instance).to.have.property('systems');
        // expect(instance.systems).to.be(expectedValueLiteral);
      });

    });
  });

}));
