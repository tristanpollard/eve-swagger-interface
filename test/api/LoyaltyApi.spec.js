/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveSwaggerInterface.LoyaltyApi();
  });

  describe('(package)', function() {
    describe('LoyaltyApi', function() {
      describe('getCharactersCharacterIdLoyaltyPoints', function() {
        it('should call getCharactersCharacterIdLoyaltyPoints successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdLoyaltyPoints call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdLoyaltyPoints(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdLoyaltyPoints200Ok);
              expect(data.corporationId).to.be.a('number');
              expect(data.corporationId).to.be(0);
              expect(data.loyaltyPoints).to.be.a('number');
              expect(data.loyaltyPoints).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLoyaltyStoresCorporationIdOffers', function() {
        it('should call getLoyaltyStoresCorporationIdOffers successfully', function(done) {
          // TODO: uncomment, update parameter values for getLoyaltyStoresCorporationIdOffers call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getLoyaltyStoresCorporationIdOffers(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetLoyaltyStoresCorporationIdOffers200Ok);
              expect(data.akCost).to.be.a('number');
              expect(data.akCost).to.be(0);
              expect(data.iskCost).to.be.a('number');
              expect(data.iskCost).to.be("0");
              expect(data.lpCost).to.be.a('number');
              expect(data.lpCost).to.be(0);
              expect(data.offerId).to.be.a('number');
              expect(data.offerId).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              {
                let dataCtr = data.requiredItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveSwaggerInterface.GetLoyaltyStoresCorporationIdOffersRequiredItem);
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0);
                  expect(data.typeId).to.be.a('number');
                  expect(data.typeId).to.be(0);
  
                        }
              }
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
