/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveSwaggerInterface.CharacterApi();
  });

  describe('(package)', function() {
    describe('CharacterApi', function() {
      describe('getCharactersCharacterId', function() {
        it('should call getCharactersCharacterId successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterId call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getCharactersCharacterId(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdOk);
            expect(data.allianceId).to.be.a('number');
            expect(data.allianceId).to.be(0);
            expect(data.ancestryId).to.be.a('number');
            expect(data.ancestryId).to.be(0);
            expect(data.birthday).to.be.a(Date);
            expect(data.birthday).to.be(new Date());
            expect(data.bloodlineId).to.be.a('number');
            expect(data.bloodlineId).to.be(0);
            expect(data.corporationId).to.be.a('number');
            expect(data.corporationId).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.factionId).to.be.a('number');
            expect(data.factionId).to.be(0);
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("female");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.raceId).to.be.a('number');
            expect(data.raceId).to.be(0);
            expect(data.securityStatus).to.be.a('number');
            expect(data.securityStatus).to.be(0.0);
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdAgentsResearch', function() {
        it('should call getCharactersCharacterIdAgentsResearch successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdAgentsResearch call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdAgentsResearch(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdAgentsResearch200Ok);
              expect(data.agentId).to.be.a('number');
              expect(data.agentId).to.be(0);
              expect(data.pointsPerDay).to.be.a('number');
              expect(data.pointsPerDay).to.be(0.0);
              expect(data.remainderPoints).to.be.a('number');
              expect(data.remainderPoints).to.be(0.0);
              expect(data.skillTypeId).to.be.a('number');
              expect(data.skillTypeId).to.be(0);
              expect(data.startedAt).to.be.a(Date);
              expect(data.startedAt).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdBlueprints', function() {
        it('should call getCharactersCharacterIdBlueprints successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdBlueprints call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCharactersCharacterIdBlueprints(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdBlueprints200Ok);
              expect(data.itemId).to.be.a('number');
              expect(data.itemId).to.be("0");
              expect(data.locationFlag).to.be.a('string');
              expect(data.locationFlag).to.be("AutoFit");
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.materialEfficiency).to.be.a('number');
              expect(data.materialEfficiency).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.runs).to.be.a('number');
              expect(data.runs).to.be(0);
              expect(data.timeEfficiency).to.be.a('number');
              expect(data.timeEfficiency).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdCorporationhistory', function() {
        it('should call getCharactersCharacterIdCorporationhistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdCorporationhistory call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getCharactersCharacterIdCorporationhistory(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdCorporationhistory200Ok);
              expect(data.corporationId).to.be.a('number');
              expect(data.corporationId).to.be(0);
              expect(data.isDeleted).to.be.a('boolean');
              expect(data.isDeleted).to.be(false);
              expect(data.recordId).to.be.a('number');
              expect(data.recordId).to.be(0);
              expect(data.startDate).to.be.a(Date);
              expect(data.startDate).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdFatigue', function() {
        it('should call getCharactersCharacterIdFatigue successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdFatigue call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdFatigue(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdFatigueOk);
            expect(data.jumpFatigueExpireDate).to.be.a(Date);
            expect(data.jumpFatigueExpireDate).to.be(new Date());
            expect(data.lastJumpDate).to.be.a(Date);
            expect(data.lastJumpDate).to.be(new Date());
            expect(data.lastUpdateDate).to.be.a(Date);
            expect(data.lastUpdateDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdMedals', function() {
        it('should call getCharactersCharacterIdMedals successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdMedals call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdMedals(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdMedals200Ok);
              expect(data.corporationId).to.be.a('number');
              expect(data.corporationId).to.be(0);
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              {
                let dataCtr = data.graphics;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdMedalsGraphic);
                  expect(data.color).to.be.a('number');
                  expect(data.color).to.be(0);
                  expect(data.graphic).to.be.a('string');
                  expect(data.graphic).to.be("");
                  expect(data.layer).to.be.a('number');
                  expect(data.layer).to.be(0);
                  expect(data.part).to.be.a('number');
                  expect(data.part).to.be(0);
  
                        }
              }
              expect(data.issuerId).to.be.a('number');
              expect(data.issuerId).to.be(0);
              expect(data.medalId).to.be.a('number');
              expect(data.medalId).to.be(0);
              expect(data.reason).to.be.a('string');
              expect(data.reason).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("public");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdNotifications', function() {
        it('should call getCharactersCharacterIdNotifications successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdNotifications call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdNotifications(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdNotifications200Ok);
              expect(data.isRead).to.be.a('boolean');
              expect(data.isRead).to.be(false);
              expect(data.notificationId).to.be.a('number');
              expect(data.notificationId).to.be("0");
              expect(data.senderId).to.be.a('number');
              expect(data.senderId).to.be(0);
              expect(data.senderType).to.be.a('string');
              expect(data.senderType).to.be("character");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("AcceptedAlly");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdNotificationsContacts', function() {
        it('should call getCharactersCharacterIdNotificationsContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdNotificationsContacts call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdNotificationsContacts(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdNotificationsContacts200Ok);
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              expect(data.notificationId).to.be.a('number');
              expect(data.notificationId).to.be(0);
              expect(data.sendDate).to.be.a(Date);
              expect(data.sendDate).to.be(new Date());
              expect(data.senderCharacterId).to.be.a('number');
              expect(data.senderCharacterId).to.be(0);
              expect(data.standingLevel).to.be.a('number');
              expect(data.standingLevel).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdPortrait', function() {
        it('should call getCharactersCharacterIdPortrait successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdPortrait call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getCharactersCharacterIdPortrait(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdPortraitOk);
            expect(data.px128x128).to.be.a('string');
            expect(data.px128x128).to.be("");
            expect(data.px256x256).to.be.a('string');
            expect(data.px256x256).to.be("");
            expect(data.px512x512).to.be.a('string');
            expect(data.px512x512).to.be("");
            expect(data.px64x64).to.be.a('string');
            expect(data.px64x64).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdRoles', function() {
        it('should call getCharactersCharacterIdRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdRoles call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdRoles(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdRolesOk);
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("Account_Take_1");
              }
            }
            {
              let dataCtr = data.rolesAtBase;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("Account_Take_1");
              }
            }
            {
              let dataCtr = data.rolesAtHq;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("Account_Take_1");
              }
            }
            {
              let dataCtr = data.rolesAtOther;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("Account_Take_1");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdStandings', function() {
        it('should call getCharactersCharacterIdStandings successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdStandings call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdStandings(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStandings200Ok);
              expect(data.fromId).to.be.a('number');
              expect(data.fromId).to.be(0);
              expect(data.fromType).to.be.a('string');
              expect(data.fromType).to.be("agent");
              expect(data.standing).to.be.a('number');
              expect(data.standing).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdStats', function() {
        it('should call getCharactersCharacterIdStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdStats call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdStats(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStats200Ok);
              expect(data.character).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsCharacter);
                    expect(data.character.daysOfActivity).to.be.a('number');
                expect(data.character.daysOfActivity).to.be("0");
                expect(data.character.minutes).to.be.a('number');
                expect(data.character.minutes).to.be("0");
                expect(data.character.sessionsStarted).to.be.a('number');
                expect(data.character.sessionsStarted).to.be("0");
              expect(data.combat).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsCombat);
                    expect(data.combat.capDrainedbyNpc).to.be.a('number');
                expect(data.combat.capDrainedbyNpc).to.be("0");
                expect(data.combat.capDrainedbyPc).to.be.a('number');
                expect(data.combat.capDrainedbyPc).to.be("0");
                expect(data.combat.capDrainingPc).to.be.a('number');
                expect(data.combat.capDrainingPc).to.be("0");
                expect(data.combat.criminalFlagSet).to.be.a('number');
                expect(data.combat.criminalFlagSet).to.be("0");
                expect(data.combat.damageFromNpCsAmount).to.be.a('number');
                expect(data.combat.damageFromNpCsAmount).to.be("0");
                expect(data.combat.damageFromNpCsNumShots).to.be.a('number');
                expect(data.combat.damageFromNpCsNumShots).to.be("0");
                expect(data.combat.damageFromPlayersBombAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersBombAmount).to.be("0");
                expect(data.combat.damageFromPlayersBombNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersBombNumShots).to.be("0");
                expect(data.combat.damageFromPlayersCombatDroneAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersCombatDroneAmount).to.be("0");
                expect(data.combat.damageFromPlayersCombatDroneNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersCombatDroneNumShots).to.be("0");
                expect(data.combat.damageFromPlayersEnergyAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersEnergyAmount).to.be("0");
                expect(data.combat.damageFromPlayersEnergyNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersEnergyNumShots).to.be("0");
                expect(data.combat.damageFromPlayersFighterBomberAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersFighterBomberAmount).to.be("0");
                expect(data.combat.damageFromPlayersFighterBomberNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersFighterBomberNumShots).to.be("0");
                expect(data.combat.damageFromPlayersFighterDroneAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersFighterDroneAmount).to.be("0");
                expect(data.combat.damageFromPlayersFighterDroneNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersFighterDroneNumShots).to.be("0");
                expect(data.combat.damageFromPlayersHybridAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersHybridAmount).to.be("0");
                expect(data.combat.damageFromPlayersHybridNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersHybridNumShots).to.be("0");
                expect(data.combat.damageFromPlayersMissileAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersMissileAmount).to.be("0");
                expect(data.combat.damageFromPlayersMissileNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersMissileNumShots).to.be("0");
                expect(data.combat.damageFromPlayersProjectileAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersProjectileAmount).to.be("0");
                expect(data.combat.damageFromPlayersProjectileNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersProjectileNumShots).to.be("0");
                expect(data.combat.damageFromPlayersSmartBombAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersSmartBombAmount).to.be("0");
                expect(data.combat.damageFromPlayersSmartBombNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersSmartBombNumShots).to.be("0");
                expect(data.combat.damageFromPlayersSuperAmount).to.be.a('number');
                expect(data.combat.damageFromPlayersSuperAmount).to.be("0");
                expect(data.combat.damageFromPlayersSuperNumShots).to.be.a('number');
                expect(data.combat.damageFromPlayersSuperNumShots).to.be("0");
                expect(data.combat.damageFromStructuresTotalAmount).to.be.a('number');
                expect(data.combat.damageFromStructuresTotalAmount).to.be("0");
                expect(data.combat.damageFromStructuresTotalNumShots).to.be.a('number');
                expect(data.combat.damageFromStructuresTotalNumShots).to.be("0");
                expect(data.combat.damageToPlayersBombAmount).to.be.a('number');
                expect(data.combat.damageToPlayersBombAmount).to.be("0");
                expect(data.combat.damageToPlayersBombNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersBombNumShots).to.be("0");
                expect(data.combat.damageToPlayersCombatDroneAmount).to.be.a('number');
                expect(data.combat.damageToPlayersCombatDroneAmount).to.be("0");
                expect(data.combat.damageToPlayersCombatDroneNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersCombatDroneNumShots).to.be("0");
                expect(data.combat.damageToPlayersEnergyAmount).to.be.a('number');
                expect(data.combat.damageToPlayersEnergyAmount).to.be("0");
                expect(data.combat.damageToPlayersEnergyNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersEnergyNumShots).to.be("0");
                expect(data.combat.damageToPlayersFighterBomberAmount).to.be.a('number');
                expect(data.combat.damageToPlayersFighterBomberAmount).to.be("0");
                expect(data.combat.damageToPlayersFighterBomberNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersFighterBomberNumShots).to.be("0");
                expect(data.combat.damageToPlayersFighterDroneAmount).to.be.a('number');
                expect(data.combat.damageToPlayersFighterDroneAmount).to.be("0");
                expect(data.combat.damageToPlayersFighterDroneNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersFighterDroneNumShots).to.be("0");
                expect(data.combat.damageToPlayersHybridAmount).to.be.a('number');
                expect(data.combat.damageToPlayersHybridAmount).to.be("0");
                expect(data.combat.damageToPlayersHybridNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersHybridNumShots).to.be("0");
                expect(data.combat.damageToPlayersMissileAmount).to.be.a('number');
                expect(data.combat.damageToPlayersMissileAmount).to.be("0");
                expect(data.combat.damageToPlayersMissileNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersMissileNumShots).to.be("0");
                expect(data.combat.damageToPlayersProjectileAmount).to.be.a('number');
                expect(data.combat.damageToPlayersProjectileAmount).to.be("0");
                expect(data.combat.damageToPlayersProjectileNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersProjectileNumShots).to.be("0");
                expect(data.combat.damageToPlayersSmartBombAmount).to.be.a('number');
                expect(data.combat.damageToPlayersSmartBombAmount).to.be("0");
                expect(data.combat.damageToPlayersSmartBombNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersSmartBombNumShots).to.be("0");
                expect(data.combat.damageToPlayersSuperAmount).to.be.a('number');
                expect(data.combat.damageToPlayersSuperAmount).to.be("0");
                expect(data.combat.damageToPlayersSuperNumShots).to.be.a('number');
                expect(data.combat.damageToPlayersSuperNumShots).to.be("0");
                expect(data.combat.damageToStructuresTotalAmount).to.be.a('number');
                expect(data.combat.damageToStructuresTotalAmount).to.be("0");
                expect(data.combat.damageToStructuresTotalNumShots).to.be.a('number');
                expect(data.combat.damageToStructuresTotalNumShots).to.be("0");
                expect(data.combat.deathsHighSec).to.be.a('number');
                expect(data.combat.deathsHighSec).to.be("0");
                expect(data.combat.deathsLowSec).to.be.a('number');
                expect(data.combat.deathsLowSec).to.be("0");
                expect(data.combat.deathsNullSec).to.be.a('number');
                expect(data.combat.deathsNullSec).to.be("0");
                expect(data.combat.deathsPodHighSec).to.be.a('number');
                expect(data.combat.deathsPodHighSec).to.be("0");
                expect(data.combat.deathsPodLowSec).to.be.a('number');
                expect(data.combat.deathsPodLowSec).to.be("0");
                expect(data.combat.deathsPodNullSec).to.be.a('number');
                expect(data.combat.deathsPodNullSec).to.be("0");
                expect(data.combat.deathsPodWormhole).to.be.a('number');
                expect(data.combat.deathsPodWormhole).to.be("0");
                expect(data.combat.deathsWormhole).to.be.a('number');
                expect(data.combat.deathsWormhole).to.be("0");
                expect(data.combat.droneEngage).to.be.a('number');
                expect(data.combat.droneEngage).to.be("0");
                expect(data.combat.dscans).to.be.a('number');
                expect(data.combat.dscans).to.be("0");
                expect(data.combat.duelRequested).to.be.a('number');
                expect(data.combat.duelRequested).to.be("0");
                expect(data.combat.engagementRegister).to.be.a('number');
                expect(data.combat.engagementRegister).to.be("0");
                expect(data.combat.killsAssists).to.be.a('number');
                expect(data.combat.killsAssists).to.be("0");
                expect(data.combat.killsHighSec).to.be.a('number');
                expect(data.combat.killsHighSec).to.be("0");
                expect(data.combat.killsLowSec).to.be.a('number');
                expect(data.combat.killsLowSec).to.be("0");
                expect(data.combat.killsNullSec).to.be.a('number');
                expect(data.combat.killsNullSec).to.be("0");
                expect(data.combat.killsPodHighSec).to.be.a('number');
                expect(data.combat.killsPodHighSec).to.be("0");
                expect(data.combat.killsPodLowSec).to.be.a('number');
                expect(data.combat.killsPodLowSec).to.be("0");
                expect(data.combat.killsPodNullSec).to.be.a('number');
                expect(data.combat.killsPodNullSec).to.be("0");
                expect(data.combat.killsPodWormhole).to.be.a('number');
                expect(data.combat.killsPodWormhole).to.be("0");
                expect(data.combat.killsWormhole).to.be.a('number');
                expect(data.combat.killsWormhole).to.be("0");
                expect(data.combat.npcFlagSet).to.be.a('number');
                expect(data.combat.npcFlagSet).to.be("0");
                expect(data.combat.probeScans).to.be.a('number');
                expect(data.combat.probeScans).to.be("0");
                expect(data.combat.pvpFlagSet).to.be.a('number');
                expect(data.combat.pvpFlagSet).to.be("0");
                expect(data.combat.repairArmorByRemoteAmount).to.be.a('number');
                expect(data.combat.repairArmorByRemoteAmount).to.be("0");
                expect(data.combat.repairArmorRemoteAmount).to.be.a('number');
                expect(data.combat.repairArmorRemoteAmount).to.be("0");
                expect(data.combat.repairArmorSelfAmount).to.be.a('number');
                expect(data.combat.repairArmorSelfAmount).to.be("0");
                expect(data.combat.repairCapacitorByRemoteAmount).to.be.a('number');
                expect(data.combat.repairCapacitorByRemoteAmount).to.be("0");
                expect(data.combat.repairCapacitorRemoteAmount).to.be.a('number');
                expect(data.combat.repairCapacitorRemoteAmount).to.be("0");
                expect(data.combat.repairCapacitorSelfAmount).to.be.a('number');
                expect(data.combat.repairCapacitorSelfAmount).to.be("0");
                expect(data.combat.repairHullByRemoteAmount).to.be.a('number');
                expect(data.combat.repairHullByRemoteAmount).to.be("0");
                expect(data.combat.repairHullRemoteAmount).to.be.a('number');
                expect(data.combat.repairHullRemoteAmount).to.be("0");
                expect(data.combat.repairHullSelfAmount).to.be.a('number');
                expect(data.combat.repairHullSelfAmount).to.be("0");
                expect(data.combat.repairShieldByRemoteAmount).to.be.a('number');
                expect(data.combat.repairShieldByRemoteAmount).to.be("0");
                expect(data.combat.repairShieldRemoteAmount).to.be.a('number');
                expect(data.combat.repairShieldRemoteAmount).to.be("0");
                expect(data.combat.repairShieldSelfAmount).to.be.a('number');
                expect(data.combat.repairShieldSelfAmount).to.be("0");
                expect(data.combat.selfDestructs).to.be.a('number');
                expect(data.combat.selfDestructs).to.be("0");
                expect(data.combat.warpScramblePc).to.be.a('number');
                expect(data.combat.warpScramblePc).to.be("0");
                expect(data.combat.warpScrambledbyNpc).to.be.a('number');
                expect(data.combat.warpScrambledbyNpc).to.be("0");
                expect(data.combat.warpScrambledbyPc).to.be.a('number');
                expect(data.combat.warpScrambledbyPc).to.be("0");
                expect(data.combat.weaponFlagSet).to.be.a('number');
                expect(data.combat.weaponFlagSet).to.be("0");
                expect(data.combat.webifiedbyNpc).to.be.a('number');
                expect(data.combat.webifiedbyNpc).to.be("0");
                expect(data.combat.webifiedbyPc).to.be.a('number');
                expect(data.combat.webifiedbyPc).to.be("0");
                expect(data.combat.webifyingPc).to.be.a('number');
                expect(data.combat.webifyingPc).to.be("0");
              expect(data.industry).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsIndustry);
                    expect(data.industry.hackingSuccesses).to.be.a('number');
                expect(data.industry.hackingSuccesses).to.be("0");
                expect(data.industry.jobsCancelled).to.be.a('number');
                expect(data.industry.jobsCancelled).to.be("0");
                expect(data.industry.jobsCompletedCopyBlueprint).to.be.a('number');
                expect(data.industry.jobsCompletedCopyBlueprint).to.be("0");
                expect(data.industry.jobsCompletedInvention).to.be.a('number');
                expect(data.industry.jobsCompletedInvention).to.be("0");
                expect(data.industry.jobsCompletedManufacture).to.be.a('number');
                expect(data.industry.jobsCompletedManufacture).to.be("0");
                expect(data.industry.jobsCompletedManufactureAsteroid).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureAsteroid).to.be("0");
                expect(data.industry.jobsCompletedManufactureAsteroidQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureAsteroidQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureCharge).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureCharge).to.be("0");
                expect(data.industry.jobsCompletedManufactureChargeQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureChargeQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureCommodity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureCommodity).to.be("0");
                expect(data.industry.jobsCompletedManufactureCommodityQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureCommodityQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureDeployable).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureDeployable).to.be("0");
                expect(data.industry.jobsCompletedManufactureDeployableQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureDeployableQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureDrone).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureDrone).to.be("0");
                expect(data.industry.jobsCompletedManufactureDroneQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureDroneQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureImplant).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureImplant).to.be("0");
                expect(data.industry.jobsCompletedManufactureImplantQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureImplantQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureModule).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureModule).to.be("0");
                expect(data.industry.jobsCompletedManufactureModuleQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureModuleQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureOther).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureOther).to.be("0");
                expect(data.industry.jobsCompletedManufactureOtherQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureOtherQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureShip).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureShip).to.be("0");
                expect(data.industry.jobsCompletedManufactureShipQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureShipQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureStructure).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureStructure).to.be("0");
                expect(data.industry.jobsCompletedManufactureStructureQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureStructureQuantity).to.be("0");
                expect(data.industry.jobsCompletedManufactureSubsystem).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureSubsystem).to.be("0");
                expect(data.industry.jobsCompletedManufactureSubsystemQuantity).to.be.a('number');
                expect(data.industry.jobsCompletedManufactureSubsystemQuantity).to.be("0");
                expect(data.industry.jobsCompletedMaterialProductivity).to.be.a('number');
                expect(data.industry.jobsCompletedMaterialProductivity).to.be("0");
                expect(data.industry.jobsCompletedTimeProductivity).to.be.a('number');
                expect(data.industry.jobsCompletedTimeProductivity).to.be("0");
                expect(data.industry.jobsStartedCopyBlueprint).to.be.a('number');
                expect(data.industry.jobsStartedCopyBlueprint).to.be("0");
                expect(data.industry.jobsStartedInvention).to.be.a('number');
                expect(data.industry.jobsStartedInvention).to.be("0");
                expect(data.industry.jobsStartedManufacture).to.be.a('number');
                expect(data.industry.jobsStartedManufacture).to.be("0");
                expect(data.industry.jobsStartedMaterialProductivity).to.be.a('number');
                expect(data.industry.jobsStartedMaterialProductivity).to.be("0");
                expect(data.industry.jobsStartedTimeProductivity).to.be.a('number');
                expect(data.industry.jobsStartedTimeProductivity).to.be("0");
                expect(data.industry.reprocessItem).to.be.a('number');
                expect(data.industry.reprocessItem).to.be("0");
                expect(data.industry.reprocessItemQuantity).to.be.a('number');
                expect(data.industry.reprocessItemQuantity).to.be("0");
              expect(data.inventory).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsInventory);
                    expect(data.inventory.abandonLootQuantity).to.be.a('number');
                expect(data.inventory.abandonLootQuantity).to.be("0");
                expect(data.inventory.trashItemQuantity).to.be.a('number');
                expect(data.inventory.trashItemQuantity).to.be("0");
              expect(data.isk).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsIsk);
                    expect(data.isk._in).to.be.a('number');
                expect(data.isk._in).to.be("0");
                expect(data.isk.out).to.be.a('number');
                expect(data.isk.out).to.be("0");
              expect(data.market).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsMarket);
                    expect(data.market.acceptContractsCourier).to.be.a('number');
                expect(data.market.acceptContractsCourier).to.be("0");
                expect(data.market.acceptContractsItemExchange).to.be.a('number');
                expect(data.market.acceptContractsItemExchange).to.be("0");
                expect(data.market.buyOrdersPlaced).to.be.a('number');
                expect(data.market.buyOrdersPlaced).to.be("0");
                expect(data.market.cancelMarketOrder).to.be.a('number');
                expect(data.market.cancelMarketOrder).to.be("0");
                expect(data.market.createContractsAuction).to.be.a('number');
                expect(data.market.createContractsAuction).to.be("0");
                expect(data.market.createContractsCourier).to.be.a('number');
                expect(data.market.createContractsCourier).to.be("0");
                expect(data.market.createContractsItemExchange).to.be.a('number');
                expect(data.market.createContractsItemExchange).to.be("0");
                expect(data.market.deliverCourierContract).to.be.a('number');
                expect(data.market.deliverCourierContract).to.be("0");
                expect(data.market.iskGained).to.be.a('number');
                expect(data.market.iskGained).to.be("0");
                expect(data.market.iskSpent).to.be.a('number');
                expect(data.market.iskSpent).to.be("0");
                expect(data.market.modifyMarketOrder).to.be.a('number');
                expect(data.market.modifyMarketOrder).to.be("0");
                expect(data.market.searchContracts).to.be.a('number');
                expect(data.market.searchContracts).to.be("0");
                expect(data.market.sellOrdersPlaced).to.be.a('number');
                expect(data.market.sellOrdersPlaced).to.be("0");
              expect(data.mining).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsMining);
                    expect(data.mining.droneMine).to.be.a('number');
                expect(data.mining.droneMine).to.be("0");
                expect(data.mining.oreArkonor).to.be.a('number');
                expect(data.mining.oreArkonor).to.be("0");
                expect(data.mining.oreBistot).to.be.a('number');
                expect(data.mining.oreBistot).to.be("0");
                expect(data.mining.oreCrokite).to.be.a('number');
                expect(data.mining.oreCrokite).to.be("0");
                expect(data.mining.oreDarkOchre).to.be.a('number');
                expect(data.mining.oreDarkOchre).to.be("0");
                expect(data.mining.oreGneiss).to.be.a('number');
                expect(data.mining.oreGneiss).to.be("0");
                expect(data.mining.oreHarvestableCloud).to.be.a('number');
                expect(data.mining.oreHarvestableCloud).to.be("0");
                expect(data.mining.oreHedbergite).to.be.a('number');
                expect(data.mining.oreHedbergite).to.be("0");
                expect(data.mining.oreHemorphite).to.be.a('number');
                expect(data.mining.oreHemorphite).to.be("0");
                expect(data.mining.oreIce).to.be.a('number');
                expect(data.mining.oreIce).to.be("0");
                expect(data.mining.oreJaspet).to.be.a('number');
                expect(data.mining.oreJaspet).to.be("0");
                expect(data.mining.oreKernite).to.be.a('number');
                expect(data.mining.oreKernite).to.be("0");
                expect(data.mining.oreMercoxit).to.be.a('number');
                expect(data.mining.oreMercoxit).to.be("0");
                expect(data.mining.oreOmber).to.be.a('number');
                expect(data.mining.oreOmber).to.be("0");
                expect(data.mining.orePlagioclase).to.be.a('number');
                expect(data.mining.orePlagioclase).to.be("0");
                expect(data.mining.orePyroxeres).to.be.a('number');
                expect(data.mining.orePyroxeres).to.be("0");
                expect(data.mining.oreScordite).to.be.a('number');
                expect(data.mining.oreScordite).to.be("0");
                expect(data.mining.oreSpodumain).to.be.a('number');
                expect(data.mining.oreSpodumain).to.be("0");
                expect(data.mining.oreVeldspar).to.be.a('number');
                expect(data.mining.oreVeldspar).to.be("0");
              expect(data.module).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsModule);
                    expect(data.module.activationsArmorHardener).to.be.a('number');
                expect(data.module.activationsArmorHardener).to.be("0");
                expect(data.module.activationsArmorRepairUnit).to.be.a('number');
                expect(data.module.activationsArmorRepairUnit).to.be("0");
                expect(data.module.activationsArmorResistanceShiftHardener).to.be.a('number');
                expect(data.module.activationsArmorResistanceShiftHardener).to.be("0");
                expect(data.module.activationsAutomatedTargetingSystem).to.be.a('number');
                expect(data.module.activationsAutomatedTargetingSystem).to.be("0");
                expect(data.module.activationsBastion).to.be.a('number');
                expect(data.module.activationsBastion).to.be("0");
                expect(data.module.activationsBombLauncher).to.be.a('number');
                expect(data.module.activationsBombLauncher).to.be("0");
                expect(data.module.activationsCapacitorBooster).to.be.a('number');
                expect(data.module.activationsCapacitorBooster).to.be("0");
                expect(data.module.activationsCargoScanner).to.be.a('number');
                expect(data.module.activationsCargoScanner).to.be("0");
                expect(data.module.activationsCloakingDevice).to.be.a('number');
                expect(data.module.activationsCloakingDevice).to.be("0");
                expect(data.module.activationsCloneVatBay).to.be.a('number');
                expect(data.module.activationsCloneVatBay).to.be("0");
                expect(data.module.activationsCynosuralField).to.be.a('number');
                expect(data.module.activationsCynosuralField).to.be("0");
                expect(data.module.activationsDamageControl).to.be.a('number');
                expect(data.module.activationsDamageControl).to.be("0");
                expect(data.module.activationsDataMiners).to.be.a('number');
                expect(data.module.activationsDataMiners).to.be("0");
                expect(data.module.activationsDroneControlUnit).to.be.a('number');
                expect(data.module.activationsDroneControlUnit).to.be("0");
                expect(data.module.activationsDroneTrackingModules).to.be.a('number');
                expect(data.module.activationsDroneTrackingModules).to.be("0");
                expect(data.module.activationsEccm).to.be.a('number');
                expect(data.module.activationsEccm).to.be("0");
                expect(data.module.activationsEcm).to.be.a('number');
                expect(data.module.activationsEcm).to.be("0");
                expect(data.module.activationsEcmBurst).to.be.a('number');
                expect(data.module.activationsEcmBurst).to.be("0");
                expect(data.module.activationsEnergyDestabilizer).to.be.a('number');
                expect(data.module.activationsEnergyDestabilizer).to.be("0");
                expect(data.module.activationsEnergyVampire).to.be.a('number');
                expect(data.module.activationsEnergyVampire).to.be("0");
                expect(data.module.activationsEnergyWeapon).to.be.a('number');
                expect(data.module.activationsEnergyWeapon).to.be("0");
                expect(data.module.activationsFestivalLauncher).to.be.a('number');
                expect(data.module.activationsFestivalLauncher).to.be("0");
                expect(data.module.activationsFrequencyMiningLaser).to.be.a('number');
                expect(data.module.activationsFrequencyMiningLaser).to.be("0");
                expect(data.module.activationsFueledArmorRepairer).to.be.a('number');
                expect(data.module.activationsFueledArmorRepairer).to.be("0");
                expect(data.module.activationsFueledShieldBooster).to.be.a('number');
                expect(data.module.activationsFueledShieldBooster).to.be("0");
                expect(data.module.activationsGangCoordinator).to.be.a('number');
                expect(data.module.activationsGangCoordinator).to.be("0");
                expect(data.module.activationsGasCloudHarvester).to.be.a('number');
                expect(data.module.activationsGasCloudHarvester).to.be("0");
                expect(data.module.activationsHullRepairUnit).to.be.a('number');
                expect(data.module.activationsHullRepairUnit).to.be("0");
                expect(data.module.activationsHybridWeapon).to.be.a('number');
                expect(data.module.activationsHybridWeapon).to.be("0");
                expect(data.module.activationsIndustrialCore).to.be.a('number');
                expect(data.module.activationsIndustrialCore).to.be("0");
                expect(data.module.activationsInterdictionSphereLauncher).to.be.a('number');
                expect(data.module.activationsInterdictionSphereLauncher).to.be("0");
                expect(data.module.activationsMicroJumpDrive).to.be.a('number');
                expect(data.module.activationsMicroJumpDrive).to.be("0");
                expect(data.module.activationsMiningLaser).to.be.a('number');
                expect(data.module.activationsMiningLaser).to.be("0");
                expect(data.module.activationsMissileLauncher).to.be.a('number');
                expect(data.module.activationsMissileLauncher).to.be("0");
                expect(data.module.activationsPassiveTargetingSystem).to.be.a('number');
                expect(data.module.activationsPassiveTargetingSystem).to.be("0");
                expect(data.module.activationsProbeLauncher).to.be.a('number');
                expect(data.module.activationsProbeLauncher).to.be("0");
                expect(data.module.activationsProjectedEccm).to.be.a('number');
                expect(data.module.activationsProjectedEccm).to.be("0");
                expect(data.module.activationsProjectileWeapon).to.be.a('number');
                expect(data.module.activationsProjectileWeapon).to.be("0");
                expect(data.module.activationsPropulsionModule).to.be.a('number');
                expect(data.module.activationsPropulsionModule).to.be("0");
                expect(data.module.activationsRemoteArmorRepairer).to.be.a('number');
                expect(data.module.activationsRemoteArmorRepairer).to.be("0");
                expect(data.module.activationsRemoteCapacitorTransmitter).to.be.a('number');
                expect(data.module.activationsRemoteCapacitorTransmitter).to.be("0");
                expect(data.module.activationsRemoteEcmBurst).to.be.a('number');
                expect(data.module.activationsRemoteEcmBurst).to.be("0");
                expect(data.module.activationsRemoteHullRepairer).to.be.a('number');
                expect(data.module.activationsRemoteHullRepairer).to.be("0");
                expect(data.module.activationsRemoteSensorBooster).to.be.a('number');
                expect(data.module.activationsRemoteSensorBooster).to.be("0");
                expect(data.module.activationsRemoteSensorDamper).to.be.a('number');
                expect(data.module.activationsRemoteSensorDamper).to.be("0");
                expect(data.module.activationsRemoteShieldBooster).to.be.a('number');
                expect(data.module.activationsRemoteShieldBooster).to.be("0");
                expect(data.module.activationsRemoteTrackingComputer).to.be.a('number');
                expect(data.module.activationsRemoteTrackingComputer).to.be("0");
                expect(data.module.activationsSalvager).to.be.a('number');
                expect(data.module.activationsSalvager).to.be("0");
                expect(data.module.activationsSensorBooster).to.be.a('number');
                expect(data.module.activationsSensorBooster).to.be("0");
                expect(data.module.activationsShieldBooster).to.be.a('number');
                expect(data.module.activationsShieldBooster).to.be("0");
                expect(data.module.activationsShieldHardener).to.be.a('number');
                expect(data.module.activationsShieldHardener).to.be("0");
                expect(data.module.activationsShipScanner).to.be.a('number');
                expect(data.module.activationsShipScanner).to.be("0");
                expect(data.module.activationsSiege).to.be.a('number');
                expect(data.module.activationsSiege).to.be("0");
                expect(data.module.activationsSmartBomb).to.be.a('number');
                expect(data.module.activationsSmartBomb).to.be("0");
                expect(data.module.activationsStasisWeb).to.be.a('number');
                expect(data.module.activationsStasisWeb).to.be("0");
                expect(data.module.activationsStripMiner).to.be.a('number');
                expect(data.module.activationsStripMiner).to.be("0");
                expect(data.module.activationsSuperWeapon).to.be.a('number');
                expect(data.module.activationsSuperWeapon).to.be("0");
                expect(data.module.activationsSurveyScanner).to.be.a('number');
                expect(data.module.activationsSurveyScanner).to.be("0");
                expect(data.module.activationsTargetBreaker).to.be.a('number');
                expect(data.module.activationsTargetBreaker).to.be("0");
                expect(data.module.activationsTargetPainter).to.be.a('number');
                expect(data.module.activationsTargetPainter).to.be("0");
                expect(data.module.activationsTrackingComputer).to.be.a('number');
                expect(data.module.activationsTrackingComputer).to.be("0");
                expect(data.module.activationsTrackingDisruptor).to.be.a('number');
                expect(data.module.activationsTrackingDisruptor).to.be("0");
                expect(data.module.activationsTractorBeam).to.be.a('number');
                expect(data.module.activationsTractorBeam).to.be("0");
                expect(data.module.activationsTriage).to.be.a('number');
                expect(data.module.activationsTriage).to.be("0");
                expect(data.module.activationsWarpDisruptFieldGenerator).to.be.a('number');
                expect(data.module.activationsWarpDisruptFieldGenerator).to.be("0");
                expect(data.module.activationsWarpScrambler).to.be.a('number');
                expect(data.module.activationsWarpScrambler).to.be("0");
                expect(data.module.linkWeapons).to.be.a('number');
                expect(data.module.linkWeapons).to.be("0");
                expect(data.module.overload).to.be.a('number');
                expect(data.module.overload).to.be("0");
                expect(data.module.repairs).to.be.a('number');
                expect(data.module.repairs).to.be("0");
              expect(data.orbital).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsOrbital);
                    expect(data.orbital.strikeCharactersKilled).to.be.a('number');
                expect(data.orbital.strikeCharactersKilled).to.be("0");
                expect(data.orbital.strikeDamageToPlayersArmorAmount).to.be.a('number');
                expect(data.orbital.strikeDamageToPlayersArmorAmount).to.be("0");
                expect(data.orbital.strikeDamageToPlayersShieldAmount).to.be.a('number');
                expect(data.orbital.strikeDamageToPlayersShieldAmount).to.be("0");
              expect(data.pve).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsPve);
                    expect(data.pve.dungeonsCompletedAgent).to.be.a('number');
                expect(data.pve.dungeonsCompletedAgent).to.be("0");
                expect(data.pve.dungeonsCompletedDistribution).to.be.a('number');
                expect(data.pve.dungeonsCompletedDistribution).to.be("0");
                expect(data.pve.missionsSucceeded).to.be.a('number');
                expect(data.pve.missionsSucceeded).to.be("0");
                expect(data.pve.missionsSucceededEpicArc).to.be.a('number');
                expect(data.pve.missionsSucceededEpicArc).to.be("0");
              expect(data.social).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsSocial);
                    expect(data.social.addContactBad).to.be.a('number');
                expect(data.social.addContactBad).to.be("0");
                expect(data.social.addContactGood).to.be.a('number');
                expect(data.social.addContactGood).to.be("0");
                expect(data.social.addContactHigh).to.be.a('number');
                expect(data.social.addContactHigh).to.be("0");
                expect(data.social.addContactHorrible).to.be.a('number');
                expect(data.social.addContactHorrible).to.be("0");
                expect(data.social.addContactNeutral).to.be.a('number');
                expect(data.social.addContactNeutral).to.be("0");
                expect(data.social.addNote).to.be.a('number');
                expect(data.social.addNote).to.be("0");
                expect(data.social.addedAsContactBad).to.be.a('number');
                expect(data.social.addedAsContactBad).to.be("0");
                expect(data.social.addedAsContactGood).to.be.a('number');
                expect(data.social.addedAsContactGood).to.be("0");
                expect(data.social.addedAsContactHigh).to.be.a('number');
                expect(data.social.addedAsContactHigh).to.be("0");
                expect(data.social.addedAsContactHorrible).to.be.a('number');
                expect(data.social.addedAsContactHorrible).to.be("0");
                expect(data.social.addedAsContactNeutral).to.be.a('number');
                expect(data.social.addedAsContactNeutral).to.be("0");
                expect(data.social.calendarEventCreated).to.be.a('number');
                expect(data.social.calendarEventCreated).to.be("0");
                expect(data.social.chatMessagesAlliance).to.be.a('number');
                expect(data.social.chatMessagesAlliance).to.be("0");
                expect(data.social.chatMessagesConstellation).to.be.a('number');
                expect(data.social.chatMessagesConstellation).to.be("0");
                expect(data.social.chatMessagesCorporation).to.be.a('number');
                expect(data.social.chatMessagesCorporation).to.be("0");
                expect(data.social.chatMessagesFleet).to.be.a('number');
                expect(data.social.chatMessagesFleet).to.be("0");
                expect(data.social.chatMessagesRegion).to.be.a('number');
                expect(data.social.chatMessagesRegion).to.be("0");
                expect(data.social.chatMessagesSolarsystem).to.be.a('number');
                expect(data.social.chatMessagesSolarsystem).to.be("0");
                expect(data.social.chatMessagesWarfaction).to.be.a('number');
                expect(data.social.chatMessagesWarfaction).to.be("0");
                expect(data.social.chatTotalMessageLength).to.be.a('number');
                expect(data.social.chatTotalMessageLength).to.be("0");
                expect(data.social.directTrades).to.be.a('number');
                expect(data.social.directTrades).to.be("0");
                expect(data.social.fleetBroadcasts).to.be.a('number');
                expect(data.social.fleetBroadcasts).to.be("0");
                expect(data.social.fleetJoins).to.be.a('number');
                expect(data.social.fleetJoins).to.be("0");
                expect(data.social.mailsReceived).to.be.a('number');
                expect(data.social.mailsReceived).to.be("0");
                expect(data.social.mailsSent).to.be.a('number');
                expect(data.social.mailsSent).to.be("0");
              expect(data.travel).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdStatsTravel);
                    expect(data.travel.accelerationGateActivations).to.be.a('number');
                expect(data.travel.accelerationGateActivations).to.be("0");
                expect(data.travel.alignTo).to.be.a('number');
                expect(data.travel.alignTo).to.be("0");
                expect(data.travel.distanceWarpedHighSec).to.be.a('number');
                expect(data.travel.distanceWarpedHighSec).to.be("0");
                expect(data.travel.distanceWarpedLowSec).to.be.a('number');
                expect(data.travel.distanceWarpedLowSec).to.be("0");
                expect(data.travel.distanceWarpedNullSec).to.be.a('number');
                expect(data.travel.distanceWarpedNullSec).to.be("0");
                expect(data.travel.distanceWarpedWormhole).to.be.a('number');
                expect(data.travel.distanceWarpedWormhole).to.be("0");
                expect(data.travel.docksHighSec).to.be.a('number');
                expect(data.travel.docksHighSec).to.be("0");
                expect(data.travel.docksLowSec).to.be.a('number');
                expect(data.travel.docksLowSec).to.be("0");
                expect(data.travel.docksNullSec).to.be.a('number');
                expect(data.travel.docksNullSec).to.be("0");
                expect(data.travel.jumpsStargateHighSec).to.be.a('number');
                expect(data.travel.jumpsStargateHighSec).to.be("0");
                expect(data.travel.jumpsStargateLowSec).to.be.a('number');
                expect(data.travel.jumpsStargateLowSec).to.be("0");
                expect(data.travel.jumpsStargateNullSec).to.be.a('number');
                expect(data.travel.jumpsStargateNullSec).to.be("0");
                expect(data.travel.jumpsWormhole).to.be.a('number');
                expect(data.travel.jumpsWormhole).to.be("0");
                expect(data.travel.warpsHighSec).to.be.a('number');
                expect(data.travel.warpsHighSec).to.be("0");
                expect(data.travel.warpsLowSec).to.be.a('number');
                expect(data.travel.warpsLowSec).to.be("0");
                expect(data.travel.warpsNullSec).to.be.a('number');
                expect(data.travel.warpsNullSec).to.be("0");
                expect(data.travel.warpsToBookmark).to.be.a('number');
                expect(data.travel.warpsToBookmark).to.be("0");
                expect(data.travel.warpsToCelestial).to.be.a('number');
                expect(data.travel.warpsToCelestial).to.be("0");
                expect(data.travel.warpsToFleetMember).to.be.a('number');
                expect(data.travel.warpsToFleetMember).to.be("0");
                expect(data.travel.warpsToScanResult).to.be.a('number');
                expect(data.travel.warpsToScanResult).to.be("0");
                expect(data.travel.warpsWormhole).to.be.a('number');
                expect(data.travel.warpsWormhole).to.be("0");
              expect(data.year).to.be.a('number');
              expect(data.year).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdTitles', function() {
        it('should call getCharactersCharacterIdTitles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdTitles call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdTitles(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdTitles200Ok);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.titleId).to.be.a('number');
              expect(data.titleId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCharactersAffiliation', function() {
        it('should call postCharactersAffiliation successfully', function(done) {
          // TODO: uncomment, update parameter values for postCharactersAffiliation call and complete the assertions
          /*
          var characters = [new EveSwaggerInterface.[Number]()];
          var opts = {};
          opts.datasource = "tranquility";

          instance.postCharactersAffiliation(characters, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.PostCharactersAffiliation200Ok);
              expect(data.allianceId).to.be.a('number');
              expect(data.allianceId).to.be(0);
              expect(data.characterId).to.be.a('number');
              expect(data.characterId).to.be(0);
              expect(data.corporationId).to.be.a('number');
              expect(data.corporationId).to.be(0);
              expect(data.factionId).to.be.a('number');
              expect(data.factionId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCharactersCharacterIdCspa', function() {
        it('should call postCharactersCharacterIdCspa successfully', function(done) {
          // TODO: uncomment, update parameter values for postCharactersCharacterIdCspa call and complete the assertions
          /*
          var characterId = 56;
          var characters = [new EveSwaggerInterface.[Number]()];
          var opts = {};
          opts.datasource = "tranquility";
          opts.token = "token_example";

          instance.postCharactersCharacterIdCspa(characterId, characters, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
