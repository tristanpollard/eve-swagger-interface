/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveSwaggerInterface.CorporationApi();
  });

  describe('(package)', function() {
    describe('CorporationApi', function() {
      describe('getCorporationsCorporationId', function() {
        it('should call getCorporationsCorporationId successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationId call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getCorporationsCorporationId(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdOk);
            expect(data.allianceId).to.be.a('number');
            expect(data.allianceId).to.be(0);
            expect(data.ceoId).to.be.a('number');
            expect(data.ceoId).to.be(0);
            expect(data.creatorId).to.be.a('number');
            expect(data.creatorId).to.be(0);
            expect(data.dateFounded).to.be.a(Date);
            expect(data.dateFounded).to.be(new Date());
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.factionId).to.be.a('number');
            expect(data.factionId).to.be(0);
            expect(data.homeStationId).to.be.a('number');
            expect(data.homeStationId).to.be(0);
            expect(data.memberCount).to.be.a('number');
            expect(data.memberCount).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.shares).to.be.a('number');
            expect(data.shares).to.be("0");
            expect(data.taxRate).to.be.a('number');
            expect(data.taxRate).to.be(0.0);
            expect(data.ticker).to.be.a('string');
            expect(data.ticker).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            expect(data.warEligible).to.be.a('boolean');
            expect(data.warEligible).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdAlliancehistory', function() {
        it('should call getCorporationsCorporationIdAlliancehistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdAlliancehistory call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getCorporationsCorporationIdAlliancehistory(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdAlliancehistory200Ok);
              expect(data.allianceId).to.be.a('number');
              expect(data.allianceId).to.be(0);
              expect(data.isDeleted).to.be.a('boolean');
              expect(data.isDeleted).to.be(false);
              expect(data.recordId).to.be.a('number');
              expect(data.recordId).to.be(0);
              expect(data.startDate).to.be.a(Date);
              expect(data.startDate).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdBlueprints', function() {
        it('should call getCorporationsCorporationIdBlueprints successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdBlueprints call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdBlueprints(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdBlueprints200Ok);
              expect(data.itemId).to.be.a('number');
              expect(data.itemId).to.be("0");
              expect(data.locationFlag).to.be.a('string');
              expect(data.locationFlag).to.be("AssetSafety");
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.materialEfficiency).to.be.a('number');
              expect(data.materialEfficiency).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.runs).to.be.a('number');
              expect(data.runs).to.be(0);
              expect(data.timeEfficiency).to.be.a('number');
              expect(data.timeEfficiency).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdContainersLogs', function() {
        it('should call getCorporationsCorporationIdContainersLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdContainersLogs call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdContainersLogs(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdContainersLogs200Ok);
              expect(data.action).to.be.a('string');
              expect(data.action).to.be("add");
              expect(data.characterId).to.be.a('number');
              expect(data.characterId).to.be(0);
              expect(data.containerId).to.be.a('number');
              expect(data.containerId).to.be("0");
              expect(data.containerTypeId).to.be.a('number');
              expect(data.containerTypeId).to.be(0);
              expect(data.locationFlag).to.be.a('string');
              expect(data.locationFlag).to.be("AssetSafety");
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.loggedAt).to.be.a(Date);
              expect(data.loggedAt).to.be(new Date());
              expect(data.newConfigBitmask).to.be.a('number');
              expect(data.newConfigBitmask).to.be(0);
              expect(data.oldConfigBitmask).to.be.a('number');
              expect(data.oldConfigBitmask).to.be(0);
              expect(data.passwordType).to.be.a('string');
              expect(data.passwordType).to.be("config");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdDivisions', function() {
        it('should call getCorporationsCorporationIdDivisions successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdDivisions call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdDivisions(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdDivisionsOk);
            {
              let dataCtr = data.hangar;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdDivisionsHangarHangar);
                expect(data.division).to.be.a('number');
                expect(data.division).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.wallet;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdDivisionsWalletWallet);
                expect(data.division).to.be.a('number');
                expect(data.division).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdFacilities', function() {
        it('should call getCorporationsCorporationIdFacilities successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdFacilities call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdFacilities(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdFacilities200Ok);
              expect(data.facilityId).to.be.a('number');
              expect(data.facilityId).to.be("0");
              expect(data.systemId).to.be.a('number');
              expect(data.systemId).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdIcons', function() {
        it('should call getCorporationsCorporationIdIcons successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdIcons call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getCorporationsCorporationIdIcons(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdIconsOk);
            expect(data.px128x128).to.be.a('string');
            expect(data.px128x128).to.be("");
            expect(data.px256x256).to.be.a('string');
            expect(data.px256x256).to.be("");
            expect(data.px64x64).to.be.a('string');
            expect(data.px64x64).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMedals', function() {
        it('should call getCorporationsCorporationIdMedals successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMedals call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMedals(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdMedals200Ok);
              expect(data.createdAt).to.be.a(Date);
              expect(data.createdAt).to.be(new Date());
              expect(data.creatorId).to.be.a('number');
              expect(data.creatorId).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.medalId).to.be.a('number');
              expect(data.medalId).to.be(0);
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMedalsIssued', function() {
        it('should call getCorporationsCorporationIdMedalsIssued successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMedalsIssued call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMedalsIssued(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdMedalsIssued200Ok);
              expect(data.characterId).to.be.a('number');
              expect(data.characterId).to.be(0);
              expect(data.issuedAt).to.be.a(Date);
              expect(data.issuedAt).to.be(new Date());
              expect(data.issuerId).to.be.a('number');
              expect(data.issuerId).to.be(0);
              expect(data.medalId).to.be.a('number');
              expect(data.medalId).to.be(0);
              expect(data.reason).to.be.a('string');
              expect(data.reason).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("private");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembers', function() {
        it('should call getCorporationsCorporationIdMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembers call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembers(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembersLimit', function() {
        it('should call getCorporationsCorporationIdMembersLimit successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembersLimit call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembersLimit(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembersTitles', function() {
        it('should call getCorporationsCorporationIdMembersTitles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembersTitles call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembersTitles(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdMembersTitles200Ok);
              expect(data.characterId).to.be.a('number');
              expect(data.characterId).to.be(0);
              {
                let dataCtr = data.titles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdMembertracking', function() {
        it('should call getCorporationsCorporationIdMembertracking successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdMembertracking call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdMembertracking(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdMembertracking200Ok);
              expect(data.baseId).to.be.a('number');
              expect(data.baseId).to.be(0);
              expect(data.characterId).to.be.a('number');
              expect(data.characterId).to.be(0);
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.logoffDate).to.be.a(Date);
              expect(data.logoffDate).to.be(new Date());
              expect(data.logonDate).to.be.a(Date);
              expect(data.logonDate).to.be(new Date());
              expect(data.shipTypeId).to.be.a('number');
              expect(data.shipTypeId).to.be(0);
              expect(data.startDate).to.be.a(Date);
              expect(data.startDate).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdRoles', function() {
        it('should call getCorporationsCorporationIdRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdRoles call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdRoles(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdRoles200Ok);
              expect(data.characterId).to.be.a('number');
              expect(data.characterId).to.be(0);
              {
                let dataCtr = data.grantableRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantableRolesAtBase;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantableRolesAtHq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantableRolesAtOther;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.rolesAtBase;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.rolesAtHq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.rolesAtOther;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdRolesHistory', function() {
        it('should call getCorporationsCorporationIdRolesHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdRolesHistory call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdRolesHistory(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdRolesHistory200Ok);
              expect(data.changedAt).to.be.a(Date);
              expect(data.changedAt).to.be(new Date());
              expect(data.characterId).to.be.a('number');
              expect(data.characterId).to.be(0);
              expect(data.issuerId).to.be.a('number');
              expect(data.issuerId).to.be(0);
              {
                let dataCtr = data.newRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.oldRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              expect(data.roleType).to.be.a('string');
              expect(data.roleType).to.be("grantable_roles");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdShareholders', function() {
        it('should call getCorporationsCorporationIdShareholders successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdShareholders call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdShareholders(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdShareholders200Ok);
              expect(data.shareCount).to.be.a('number');
              expect(data.shareCount).to.be("0");
              expect(data.shareholderId).to.be.a('number');
              expect(data.shareholderId).to.be(0);
              expect(data.shareholderType).to.be.a('string');
              expect(data.shareholderType).to.be("character");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStandings', function() {
        it('should call getCorporationsCorporationIdStandings successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStandings call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStandings(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStandings200Ok);
              expect(data.fromId).to.be.a('number');
              expect(data.fromId).to.be(0);
              expect(data.fromType).to.be.a('string');
              expect(data.fromType).to.be("agent");
              expect(data.standing).to.be.a('number');
              expect(data.standing).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStarbases', function() {
        it('should call getCorporationsCorporationIdStarbases successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStarbases call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStarbases(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStarbases200Ok);
              expect(data.moonId).to.be.a('number');
              expect(data.moonId).to.be(0);
              expect(data.onlinedSince).to.be.a(Date);
              expect(data.onlinedSince).to.be(new Date());
              expect(data.reinforcedUntil).to.be.a(Date);
              expect(data.reinforcedUntil).to.be(new Date());
              expect(data.starbaseId).to.be.a('number');
              expect(data.starbaseId).to.be("0");
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("offline");
              expect(data.systemId).to.be.a('number');
              expect(data.systemId).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.unanchorAt).to.be.a(Date);
              expect(data.unanchorAt).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStarbasesStarbaseId', function() {
        it('should call getCorporationsCorporationIdStarbasesStarbaseId successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStarbasesStarbaseId call and complete the assertions
          /*
          var corporationId = 56;
          var starbaseId = 789;
          var systemId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStarbasesStarbaseId(corporationId, starbaseId, systemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStarbasesStarbaseIdOk);
            expect(data.allowAllianceMembers).to.be.a('boolean');
            expect(data.allowAllianceMembers).to.be(false);
            expect(data.allowCorporationMembers).to.be.a('boolean');
            expect(data.allowCorporationMembers).to.be(false);
            expect(data.anchor).to.be.a('string');
            expect(data.anchor).to.be("alliance_member");
            expect(data.attackIfAtWar).to.be.a('boolean');
            expect(data.attackIfAtWar).to.be(false);
            expect(data.attackIfOtherSecurityStatusDropping).to.be.a('boolean');
            expect(data.attackIfOtherSecurityStatusDropping).to.be(false);
            expect(data.attackSecurityStatusThreshold).to.be.a('number');
            expect(data.attackSecurityStatusThreshold).to.be(0.0);
            expect(data.attackStandingThreshold).to.be.a('number');
            expect(data.attackStandingThreshold).to.be(0.0);
            expect(data.fuelBayTake).to.be.a('string');
            expect(data.fuelBayTake).to.be("alliance_member");
            expect(data.fuelBayView).to.be.a('string');
            expect(data.fuelBayView).to.be("alliance_member");
            {
              let dataCtr = data.fuels;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStarbasesStarbaseIdFuel);
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0);
                expect(data.typeId).to.be.a('number');
                expect(data.typeId).to.be(0);

                      }
            }
            expect(data.offline).to.be.a('string');
            expect(data.offline).to.be("alliance_member");
            expect(data.online).to.be.a('string');
            expect(data.online).to.be("alliance_member");
            expect(data.unanchor).to.be.a('string');
            expect(data.unanchor).to.be("alliance_member");
            expect(data.useAllianceStandings).to.be.a('boolean');
            expect(data.useAllianceStandings).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdStructures', function() {
        it('should call getCorporationsCorporationIdStructures successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdStructures call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.acceptLanguage = "en-us";
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.language = "en-us";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdStructures(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStructures200Ok);
              expect(data.corporationId).to.be.a('number');
              expect(data.corporationId).to.be(0);
              expect(data.fuelExpires).to.be.a(Date);
              expect(data.fuelExpires).to.be(new Date());
              expect(data.nextReinforceApply).to.be.a(Date);
              expect(data.nextReinforceApply).to.be(new Date());
              expect(data.nextReinforceHour).to.be.a('number');
              expect(data.nextReinforceHour).to.be(0);
              expect(data.nextReinforceWeekday).to.be.a('number');
              expect(data.nextReinforceWeekday).to.be(0);
              expect(data.profileId).to.be.a('number');
              expect(data.profileId).to.be(0);
              expect(data.reinforceHour).to.be.a('number');
              expect(data.reinforceHour).to.be(0);
              expect(data.reinforceWeekday).to.be.a('number');
              expect(data.reinforceWeekday).to.be(0);
              {
                let dataCtr = data.services;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdStructuresService);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.state).to.be.a('string');
                  expect(data.state).to.be("online");
  
                        }
              }
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("anchor_vulnerable");
              expect(data.stateTimerEnd).to.be.a(Date);
              expect(data.stateTimerEnd).to.be(new Date());
              expect(data.stateTimerStart).to.be.a(Date);
              expect(data.stateTimerStart).to.be(new Date());
              expect(data.structureId).to.be.a('number');
              expect(data.structureId).to.be("0");
              expect(data.systemId).to.be.a('number');
              expect(data.systemId).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.unanchorsAt).to.be.a(Date);
              expect(data.unanchorsAt).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdTitles', function() {
        it('should call getCorporationsCorporationIdTitles successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdTitles call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCorporationsCorporationIdTitles(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdTitles200Ok);
              {
                let dataCtr = data.grantableRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantableRolesAtBase;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantableRolesAtHq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.grantableRolesAtOther;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              {
                let dataCtr = data.roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.rolesAtBase;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.rolesAtHq;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              {
                let dataCtr = data.rolesAtOther;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Account_Take_1");
                }
              }
              expect(data.titleId).to.be.a('number');
              expect(data.titleId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsNpccorps', function() {
        it('should call getCorporationsNpccorps successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsNpccorps call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getCorporationsNpccorps(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
