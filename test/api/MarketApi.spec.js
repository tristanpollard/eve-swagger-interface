/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EveSwaggerInterface);
  }
}(this, function(expect, EveSwaggerInterface) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EveSwaggerInterface.MarketApi();
  });

  describe('(package)', function() {
    describe('MarketApi', function() {
      describe('getCharactersCharacterIdOrders', function() {
        it('should call getCharactersCharacterIdOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdOrders call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.token = "token_example";

          instance.getCharactersCharacterIdOrders(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdOrders200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.isBuyOrder).to.be.a('boolean');
              expect(data.isBuyOrder).to.be(false);
              expect(data.isCorporation).to.be.a('boolean');
              expect(data.isCorporation).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.minVolume).to.be.a('number');
              expect(data.minVolume).to.be(0);
              expect(data.orderId).to.be.a('number');
              expect(data.orderId).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.regionId).to.be.a('number');
              expect(data.regionId).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.volumeRemain).to.be.a('number');
              expect(data.volumeRemain).to.be(0);
              expect(data.volumeTotal).to.be.a('number');
              expect(data.volumeTotal).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCharactersCharacterIdOrdersHistory', function() {
        it('should call getCharactersCharacterIdOrdersHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCharactersCharacterIdOrdersHistory call and complete the assertions
          /*
          var characterId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCharactersCharacterIdOrdersHistory(characterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCharactersCharacterIdOrdersHistory200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.isBuyOrder).to.be.a('boolean');
              expect(data.isBuyOrder).to.be(false);
              expect(data.isCorporation).to.be.a('boolean');
              expect(data.isCorporation).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.minVolume).to.be.a('number');
              expect(data.minVolume).to.be(0);
              expect(data.orderId).to.be.a('number');
              expect(data.orderId).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.regionId).to.be.a('number');
              expect(data.regionId).to.be(0);
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("cancelled");
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.volumeRemain).to.be.a('number');
              expect(data.volumeRemain).to.be(0);
              expect(data.volumeTotal).to.be.a('number');
              expect(data.volumeTotal).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdOrders', function() {
        it('should call getCorporationsCorporationIdOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdOrders call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdOrders(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdOrders200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.isBuyOrder).to.be.a('boolean');
              expect(data.isBuyOrder).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.issuedBy).to.be.a('number');
              expect(data.issuedBy).to.be(0);
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.minVolume).to.be.a('number');
              expect(data.minVolume).to.be(0);
              expect(data.orderId).to.be.a('number');
              expect(data.orderId).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.regionId).to.be.a('number');
              expect(data.regionId).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.volumeRemain).to.be.a('number');
              expect(data.volumeRemain).to.be(0);
              expect(data.volumeTotal).to.be.a('number');
              expect(data.volumeTotal).to.be(0);
              expect(data.walletDivision).to.be.a('number');
              expect(data.walletDivision).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCorporationsCorporationIdOrdersHistory', function() {
        it('should call getCorporationsCorporationIdOrdersHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCorporationsCorporationIdOrdersHistory call and complete the assertions
          /*
          var corporationId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getCorporationsCorporationIdOrdersHistory(corporationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetCorporationsCorporationIdOrdersHistory200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.escrow).to.be.a('number');
              expect(data.escrow).to.be(0.0);
              expect(data.isBuyOrder).to.be.a('boolean');
              expect(data.isBuyOrder).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.issuedBy).to.be.a('number');
              expect(data.issuedBy).to.be(0);
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.minVolume).to.be.a('number');
              expect(data.minVolume).to.be(0);
              expect(data.orderId).to.be.a('number');
              expect(data.orderId).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("1");
              expect(data.regionId).to.be.a('number');
              expect(data.regionId).to.be(0);
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("cancelled");
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.volumeRemain).to.be.a('number');
              expect(data.volumeRemain).to.be(0);
              expect(data.volumeTotal).to.be.a('number');
              expect(data.volumeTotal).to.be(0);
              expect(data.walletDivision).to.be.a('number');
              expect(data.walletDivision).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsGroups', function() {
        it('should call getMarketsGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsGroups call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getMarketsGroups(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsGroupsMarketGroupId', function() {
        it('should call getMarketsGroupsMarketGroupId successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsGroupsMarketGroupId call and complete the assertions
          /*
          var marketGroupId = 56;
          var opts = {};
          opts.acceptLanguage = "en-us";
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.language = "en-us";

          instance.getMarketsGroupsMarketGroupId(marketGroupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EveSwaggerInterface.GetMarketsGroupsMarketGroupIdOk);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.marketGroupId).to.be.a('number');
            expect(data.marketGroupId).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parentGroupId).to.be.a('number');
            expect(data.parentGroupId).to.be(0);
            {
              let dataCtr = data.types;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsPrices', function() {
        it('should call getMarketsPrices successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsPrices call and complete the assertions
          /*
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getMarketsPrices(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetMarketsPrices200Ok);
              expect(data.adjustedPrice).to.be.a('number');
              expect(data.adjustedPrice).to.be(0.0);
              expect(data.averagePrice).to.be.a('number');
              expect(data.averagePrice).to.be(0.0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsRegionIdHistory', function() {
        it('should call getMarketsRegionIdHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsRegionIdHistory call and complete the assertions
          /*
          var regionId = 56;
          var typeId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";

          instance.getMarketsRegionIdHistory(regionId, typeId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetMarketsRegionIdHistory200Ok);
              expect(data.average).to.be.a('number');
              expect(data.average).to.be(0.0);
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.highest).to.be.a('number');
              expect(data.highest).to.be(0.0);
              expect(data.lowest).to.be.a('number');
              expect(data.lowest).to.be(0.0);
              expect(data.orderCount).to.be.a('number');
              expect(data.orderCount).to.be("0");
              expect(data.volume).to.be.a('number');
              expect(data.volume).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsRegionIdOrders', function() {
        it('should call getMarketsRegionIdOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsRegionIdOrders call and complete the assertions
          /*
          var orderType = "all";
          var regionId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.typeId = 56;

          instance.getMarketsRegionIdOrders(orderType, regionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetMarketsRegionIdOrders200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.isBuyOrder).to.be.a('boolean');
              expect(data.isBuyOrder).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.minVolume).to.be.a('number');
              expect(data.minVolume).to.be(0);
              expect(data.orderId).to.be.a('number');
              expect(data.orderId).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("station");
              expect(data.systemId).to.be.a('number');
              expect(data.systemId).to.be(0);
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.volumeRemain).to.be.a('number');
              expect(data.volumeRemain).to.be(0);
              expect(data.volumeTotal).to.be.a('number');
              expect(data.volumeTotal).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsRegionIdTypes', function() {
        it('should call getMarketsRegionIdTypes successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsRegionIdTypes call and complete the assertions
          /*
          var regionId = 56;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;

          instance.getMarketsRegionIdTypes(regionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMarketsStructuresStructureId', function() {
        it('should call getMarketsStructuresStructureId successfully', function(done) {
          // TODO: uncomment, update parameter values for getMarketsStructuresStructureId call and complete the assertions
          /*
          var structureId = 789;
          var opts = {};
          opts.datasource = "tranquility";
          opts.ifNoneMatch = "ifNoneMatch_example";
          opts.page = 1;
          opts.token = "token_example";

          instance.getMarketsStructuresStructureId(structureId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EveSwaggerInterface.GetMarketsStructuresStructureId200Ok);
              expect(data.duration).to.be.a('number');
              expect(data.duration).to.be(0);
              expect(data.isBuyOrder).to.be.a('boolean');
              expect(data.isBuyOrder).to.be(false);
              expect(data.issued).to.be.a(Date);
              expect(data.issued).to.be(new Date());
              expect(data.locationId).to.be.a('number');
              expect(data.locationId).to.be("0");
              expect(data.minVolume).to.be.a('number');
              expect(data.minVolume).to.be(0);
              expect(data.orderId).to.be.a('number');
              expect(data.orderId).to.be("0");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(0.0);
              expect(data.range).to.be.a('string');
              expect(data.range).to.be("station");
              expect(data.typeId).to.be.a('number');
              expect(data.typeId).to.be(0);
              expect(data.volumeRemain).to.be.a('number');
              expect(data.volumeRemain).to.be(0);
              expect(data.volumeTotal).to.be.a('number');
              expect(data.volumeTotal).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
