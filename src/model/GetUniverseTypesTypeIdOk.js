/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetUniverseTypesTypeIdDogmaAttribute', 'model/GetUniverseTypesTypeIdDogmaEffect'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./GetUniverseTypesTypeIdDogmaAttribute'), require('./GetUniverseTypesTypeIdDogmaEffect'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.GetUniverseTypesTypeIdOk = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetUniverseTypesTypeIdDogmaAttribute, root.EveSwaggerInterface.GetUniverseTypesTypeIdDogmaEffect);
  }
}(this, function(ApiClient, GetUniverseTypesTypeIdDogmaAttribute, GetUniverseTypesTypeIdDogmaEffect) {
  'use strict';

  /**
   * The GetUniverseTypesTypeIdOk model module.
   * @module model/GetUniverseTypesTypeIdOk
   * @version 1.3.8
   */

  /**
   * Constructs a new <code>GetUniverseTypesTypeIdOk</code>.
   * 200 ok object
   * @alias module:model/GetUniverseTypesTypeIdOk
   * @class
   * @param description {String} description string
   * @param groupId {Number} group_id integer
   * @param name {String} name string
   * @param published {Boolean} published boolean
   * @param typeId {Number} type_id integer
   */
  var exports = function(description, groupId, name, published, typeId) {
    this.description = description;
    this.groupId = groupId;
    this.name = name;
    this.published = published;
    this.typeId = typeId;
  };

  /**
   * Constructs a <code>GetUniverseTypesTypeIdOk</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetUniverseTypesTypeIdOk} obj Optional instance to populate.
   * @return {module:model/GetUniverseTypesTypeIdOk} The populated <code>GetUniverseTypesTypeIdOk</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('capacity'))
        obj.capacity = ApiClient.convertToType(data['capacity'], 'Number');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('dogma_attributes'))
        obj.dogmaAttributes = ApiClient.convertToType(data['dogma_attributes'], [GetUniverseTypesTypeIdDogmaAttribute]);
      if (data.hasOwnProperty('dogma_effects'))
        obj.dogmaEffects = ApiClient.convertToType(data['dogma_effects'], [GetUniverseTypesTypeIdDogmaEffect]);
      if (data.hasOwnProperty('graphic_id'))
        obj.graphicId = ApiClient.convertToType(data['graphic_id'], 'Number');
      if (data.hasOwnProperty('group_id'))
        obj.groupId = ApiClient.convertToType(data['group_id'], 'Number');
      if (data.hasOwnProperty('icon_id'))
        obj.iconId = ApiClient.convertToType(data['icon_id'], 'Number');
      if (data.hasOwnProperty('market_group_id'))
        obj.marketGroupId = ApiClient.convertToType(data['market_group_id'], 'Number');
      if (data.hasOwnProperty('mass'))
        obj.mass = ApiClient.convertToType(data['mass'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('packaged_volume'))
        obj.packagedVolume = ApiClient.convertToType(data['packaged_volume'], 'Number');
      if (data.hasOwnProperty('portion_size'))
        obj.portionSize = ApiClient.convertToType(data['portion_size'], 'Number');
      if (data.hasOwnProperty('published'))
        obj.published = ApiClient.convertToType(data['published'], 'Boolean');
      if (data.hasOwnProperty('radius'))
        obj.radius = ApiClient.convertToType(data['radius'], 'Number');
      if (data.hasOwnProperty('type_id'))
        obj.typeId = ApiClient.convertToType(data['type_id'], 'Number');
      if (data.hasOwnProperty('volume'))
        obj.volume = ApiClient.convertToType(data['volume'], 'Number');
    }
    return obj;
  }

  /**
   * capacity number
   * @member {Number} capacity
   */
  exports.prototype.capacity = undefined;

  /**
   * description string
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * dogma_attributes array
   * @member {Array.<module:model/GetUniverseTypesTypeIdDogmaAttribute>} dogmaAttributes
   */
  exports.prototype.dogmaAttributes = undefined;

  /**
   * dogma_effects array
   * @member {Array.<module:model/GetUniverseTypesTypeIdDogmaEffect>} dogmaEffects
   */
  exports.prototype.dogmaEffects = undefined;

  /**
   * graphic_id integer
   * @member {Number} graphicId
   */
  exports.prototype.graphicId = undefined;

  /**
   * group_id integer
   * @member {Number} groupId
   */
  exports.prototype.groupId = undefined;

  /**
   * icon_id integer
   * @member {Number} iconId
   */
  exports.prototype.iconId = undefined;

  /**
   * This only exists for types that can be put on the market
   * @member {Number} marketGroupId
   */
  exports.prototype.marketGroupId = undefined;

  /**
   * mass number
   * @member {Number} mass
   */
  exports.prototype.mass = undefined;

  /**
   * name string
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * packaged_volume number
   * @member {Number} packagedVolume
   */
  exports.prototype.packagedVolume = undefined;

  /**
   * portion_size integer
   * @member {Number} portionSize
   */
  exports.prototype.portionSize = undefined;

  /**
   * published boolean
   * @member {Boolean} published
   */
  exports.prototype.published = undefined;

  /**
   * radius number
   * @member {Number} radius
   */
  exports.prototype.radius = undefined;

  /**
   * type_id integer
   * @member {Number} typeId
   */
  exports.prototype.typeId = undefined;

  /**
   * volume number
   * @member {Number} volume
   */
  exports.prototype.volume = undefined;

  return exports;

}));
